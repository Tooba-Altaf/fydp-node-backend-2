
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type usersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "users"
  objects: {
    institute: usersPayload<ExtArgs> | null
    staff: usersPayload<ExtArgs>[]
    vaccines: vaccinePayload<ExtArgs>[]
    dispatch: dispatchPayload<ExtArgs>[]
    staff_dispatch: dispatchPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    email: string
    password: string | null
    name: string
    contact: string | null
    license: string | null
    gender: Gender | null
    type: UserType
    status: UserStatus
    createdAt: Date
    updatedAt: Date | null
    deletedAt: Date | null
    date_of_birth: Date | null
    cnic: string | null
    location: string | null
    institute_id: number | null
  }, ExtArgs["result"]["users"]>
  composites: {}
}

/**
 * Model users
 * 
 */
export type users = runtime.Types.DefaultSelection<usersPayload>
export type vaccinePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "vaccine"
  objects: {
    manufacturer: usersPayload<ExtArgs>
    dispatch: dispatchPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    doses: number | null
    info: string | null
    status: VaccineStatus
    manufacturer_id: number
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
  }, ExtArgs["result"]["vaccine"]>
  composites: {}
}

/**
 * Model vaccine
 * 
 */
export type vaccine = runtime.Types.DefaultSelection<vaccinePayload>
export type dispatchPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "dispatch"
  objects: {
    vaccine: vaccinePayload<ExtArgs>
    civilian: civilianPayload<ExtArgs> | null
    institute: usersPayload<ExtArgs>
    staff: usersPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    vaccine_id: number
    batch_id: string
    status: DispatchStatus
    civilian_id: number | null
    institute_id: number
    staff_id: number | null
    request_date: Date
    dispatch_date: Date | null
    receive_date: Date | null
    vaccination_date: Date | null
  }, ExtArgs["result"]["dispatch"]>
  composites: {}
}

/**
 * Model dispatch
 * 
 */
export type dispatch = runtime.Types.DefaultSelection<dispatchPayload>
export type civilianPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "civilian"
  objects: {
    dispatch: dispatchPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    cnic: string
    name: string
    date_of_birth: Date | null
    gender: Gender
    contact: string
  }, ExtArgs["result"]["civilian"]>
  composites: {}
}

/**
 * Model civilian
 * 
 */
export type civilian = runtime.Types.DefaultSelection<civilianPayload>

/**
 * Enums
 */

export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const UserType: {
  STAFF: 'STAFF',
  INSTITUTE: 'INSTITUTE',
  MANUFACTURER: 'MANUFACTURER',
  ADMIN: 'ADMIN'
};

export type UserType = (typeof UserType)[keyof typeof UserType]


export const UserStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  BLOCKED: 'BLOCKED'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const VaccineStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type VaccineStatus = (typeof VaccineStatus)[keyof typeof VaccineStatus]


export const DispatchStatus: {
  REQUESTED: 'REQUESTED',
  DISPATCH: 'DISPATCH',
  RECEIVED: 'RECEIVED'
};

export type DispatchStatus = (typeof DispatchStatus)[keyof typeof DispatchStatus]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.vaccine`: Exposes CRUD operations for the **vaccine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vaccines
    * const vaccines = await prisma.vaccine.findMany()
    * ```
    */
  get vaccine(): Prisma.vaccineDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.dispatch`: Exposes CRUD operations for the **dispatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dispatches
    * const dispatches = await prisma.dispatch.findMany()
    * ```
    */
  get dispatch(): Prisma.dispatchDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.civilian`: Exposes CRUD operations for the **civilian** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Civilians
    * const civilians = await prisma.civilian.findMany()
    * ```
    */
  get civilian(): Prisma.civilianDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    vaccine: 'vaccine',
    dispatch: 'dispatch',
    civilian: 'civilian'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'vaccine' | 'dispatch' | 'civilian'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      users: {
        payload: usersPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      vaccine: {
        payload: vaccinePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.vaccineFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<vaccinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.vaccineFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<vaccinePayload>
          }
          findFirst: {
            args: Prisma.vaccineFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<vaccinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.vaccineFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<vaccinePayload>
          }
          findMany: {
            args: Prisma.vaccineFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<vaccinePayload>[]
          }
          create: {
            args: Prisma.vaccineCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<vaccinePayload>
          }
          createMany: {
            args: Prisma.vaccineCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.vaccineDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<vaccinePayload>
          }
          update: {
            args: Prisma.vaccineUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<vaccinePayload>
          }
          deleteMany: {
            args: Prisma.vaccineDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.vaccineUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.vaccineUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<vaccinePayload>
          }
          aggregate: {
            args: Prisma.VaccineAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVaccine>
          }
          groupBy: {
            args: Prisma.VaccineGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VaccineGroupByOutputType>[]
          }
          count: {
            args: Prisma.vaccineCountArgs<ExtArgs>,
            result: $Utils.Optional<VaccineCountAggregateOutputType> | number
          }
        }
      }
      dispatch: {
        payload: dispatchPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.dispatchFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<dispatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.dispatchFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<dispatchPayload>
          }
          findFirst: {
            args: Prisma.dispatchFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<dispatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.dispatchFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<dispatchPayload>
          }
          findMany: {
            args: Prisma.dispatchFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<dispatchPayload>[]
          }
          create: {
            args: Prisma.dispatchCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<dispatchPayload>
          }
          createMany: {
            args: Prisma.dispatchCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.dispatchDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<dispatchPayload>
          }
          update: {
            args: Prisma.dispatchUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<dispatchPayload>
          }
          deleteMany: {
            args: Prisma.dispatchDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.dispatchUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.dispatchUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<dispatchPayload>
          }
          aggregate: {
            args: Prisma.DispatchAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDispatch>
          }
          groupBy: {
            args: Prisma.DispatchGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DispatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.dispatchCountArgs<ExtArgs>,
            result: $Utils.Optional<DispatchCountAggregateOutputType> | number
          }
        }
      }
      civilian: {
        payload: civilianPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.civilianFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<civilianPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.civilianFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<civilianPayload>
          }
          findFirst: {
            args: Prisma.civilianFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<civilianPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.civilianFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<civilianPayload>
          }
          findMany: {
            args: Prisma.civilianFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<civilianPayload>[]
          }
          create: {
            args: Prisma.civilianCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<civilianPayload>
          }
          createMany: {
            args: Prisma.civilianCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.civilianDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<civilianPayload>
          }
          update: {
            args: Prisma.civilianUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<civilianPayload>
          }
          deleteMany: {
            args: Prisma.civilianDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.civilianUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.civilianUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<civilianPayload>
          }
          aggregate: {
            args: Prisma.CivilianAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCivilian>
          }
          groupBy: {
            args: Prisma.CivilianGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CivilianGroupByOutputType>[]
          }
          count: {
            args: Prisma.civilianCountArgs<ExtArgs>,
            result: $Utils.Optional<CivilianCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    staff: number
    vaccines: number
    dispatch: number
    staff_dispatch: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    staff?: boolean | UsersCountOutputTypeCountStaffArgs
    vaccines?: boolean | UsersCountOutputTypeCountVaccinesArgs
    dispatch?: boolean | UsersCountOutputTypeCountDispatchArgs
    staff_dispatch?: boolean | UsersCountOutputTypeCountStaff_dispatchArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountStaffArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountVaccinesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: vaccineWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountDispatchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: dispatchWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountStaff_dispatchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: dispatchWhereInput
  }



  /**
   * Count Type VaccineCountOutputType
   */


  export type VaccineCountOutputType = {
    dispatch: number
  }

  export type VaccineCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    dispatch?: boolean | VaccineCountOutputTypeCountDispatchArgs
  }

  // Custom InputTypes

  /**
   * VaccineCountOutputType without action
   */
  export type VaccineCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VaccineCountOutputType
     */
    select?: VaccineCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * VaccineCountOutputType without action
   */
  export type VaccineCountOutputTypeCountDispatchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: dispatchWhereInput
  }



  /**
   * Count Type CivilianCountOutputType
   */


  export type CivilianCountOutputType = {
    dispatch: number
  }

  export type CivilianCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    dispatch?: boolean | CivilianCountOutputTypeCountDispatchArgs
  }

  // Custom InputTypes

  /**
   * CivilianCountOutputType without action
   */
  export type CivilianCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CivilianCountOutputType
     */
    select?: CivilianCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CivilianCountOutputType without action
   */
  export type CivilianCountOutputTypeCountDispatchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: dispatchWhereInput
  }



  /**
   * Models
   */

  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    institute_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    institute_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    contact: string | null
    license: string | null
    gender: Gender | null
    type: UserType | null
    status: UserStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    date_of_birth: Date | null
    cnic: string | null
    location: string | null
    institute_id: number | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    contact: string | null
    license: string | null
    gender: Gender | null
    type: UserType | null
    status: UserStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    date_of_birth: Date | null
    cnic: string | null
    location: string | null
    institute_id: number | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    contact: number
    license: number
    gender: number
    type: number
    status: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    date_of_birth: number
    cnic: number
    location: number
    institute_id: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    institute_id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    institute_id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    contact?: true
    license?: true
    gender?: true
    type?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    date_of_birth?: true
    cnic?: true
    location?: true
    institute_id?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    contact?: true
    license?: true
    gender?: true
    type?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    date_of_birth?: true
    cnic?: true
    location?: true
    institute_id?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    contact?: true
    license?: true
    gender?: true
    type?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    date_of_birth?: true
    cnic?: true
    location?: true
    institute_id?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: UsersScalarFieldEnum[]
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    email: string
    password: string | null
    name: string
    contact: string | null
    license: string | null
    gender: Gender | null
    type: UserType
    status: UserStatus
    createdAt: Date
    updatedAt: Date | null
    deletedAt: Date | null
    date_of_birth: Date | null
    cnic: string | null
    location: string | null
    institute_id: number | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    contact?: boolean
    license?: boolean
    gender?: boolean
    type?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    date_of_birth?: boolean
    cnic?: boolean
    location?: boolean
    institute_id?: boolean
    institute?: boolean | usersArgs<ExtArgs>
    staff?: boolean | users$staffArgs<ExtArgs>
    vaccines?: boolean | users$vaccinesArgs<ExtArgs>
    dispatch?: boolean | users$dispatchArgs<ExtArgs>
    staff_dispatch?: boolean | users$staff_dispatchArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    contact?: boolean
    license?: boolean
    gender?: boolean
    type?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    date_of_birth?: boolean
    cnic?: boolean
    location?: boolean
    institute_id?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    institute?: boolean | usersArgs<ExtArgs>
    staff?: boolean | users$staffArgs<ExtArgs>
    vaccines?: boolean | users$vaccinesArgs<ExtArgs>
    dispatch?: boolean | users$dispatchArgs<ExtArgs>
    staff_dispatch?: boolean | users$staff_dispatchArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeArgs<ExtArgs>
  }


  type usersGetPayload<S extends boolean | null | undefined | usersArgs> = $Types.GetResult<usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<usersPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    institute<T extends usersArgs<ExtArgs> = {}>(args?: Subset<T, usersArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    staff<T extends users$staffArgs<ExtArgs> = {}>(args?: Subset<T, users$staffArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<usersPayload<ExtArgs>, T, 'findMany', never>| Null>;

    vaccines<T extends users$vaccinesArgs<ExtArgs> = {}>(args?: Subset<T, users$vaccinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<vaccinePayload<ExtArgs>, T, 'findMany', never>| Null>;

    dispatch<T extends users$dispatchArgs<ExtArgs> = {}>(args?: Subset<T, users$dispatchArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'findMany', never>| Null>;

    staff_dispatch<T extends users$staff_dispatchArgs<ExtArgs> = {}>(args?: Subset<T, users$staff_dispatchArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUnique
   */
  export interface usersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends usersFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users findFirst
   */
  export interface usersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends usersFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.staff
   */
  export type users$staffArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users.vaccines
   */
  export type users$vaccinesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vaccine
     */
    select?: vaccineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vaccineInclude<ExtArgs> | null
    where?: vaccineWhereInput
    orderBy?: Enumerable<vaccineOrderByWithRelationInput>
    cursor?: vaccineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VaccineScalarFieldEnum>
  }


  /**
   * users.dispatch
   */
  export type users$dispatchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
    where?: dispatchWhereInput
    orderBy?: Enumerable<dispatchOrderByWithRelationInput>
    cursor?: dispatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DispatchScalarFieldEnum>
  }


  /**
   * users.staff_dispatch
   */
  export type users$staff_dispatchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
    where?: dispatchWhereInput
    orderBy?: Enumerable<dispatchOrderByWithRelationInput>
    cursor?: dispatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DispatchScalarFieldEnum>
  }


  /**
   * users without action
   */
  export type usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
  }



  /**
   * Model vaccine
   */


  export type AggregateVaccine = {
    _count: VaccineCountAggregateOutputType | null
    _avg: VaccineAvgAggregateOutputType | null
    _sum: VaccineSumAggregateOutputType | null
    _min: VaccineMinAggregateOutputType | null
    _max: VaccineMaxAggregateOutputType | null
  }

  export type VaccineAvgAggregateOutputType = {
    id: number | null
    doses: number | null
    manufacturer_id: number | null
  }

  export type VaccineSumAggregateOutputType = {
    id: number | null
    doses: number | null
    manufacturer_id: number | null
  }

  export type VaccineMinAggregateOutputType = {
    id: number | null
    name: string | null
    doses: number | null
    info: string | null
    status: VaccineStatus | null
    manufacturer_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type VaccineMaxAggregateOutputType = {
    id: number | null
    name: string | null
    doses: number | null
    info: string | null
    status: VaccineStatus | null
    manufacturer_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type VaccineCountAggregateOutputType = {
    id: number
    name: number
    doses: number
    info: number
    status: number
    manufacturer_id: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type VaccineAvgAggregateInputType = {
    id?: true
    doses?: true
    manufacturer_id?: true
  }

  export type VaccineSumAggregateInputType = {
    id?: true
    doses?: true
    manufacturer_id?: true
  }

  export type VaccineMinAggregateInputType = {
    id?: true
    name?: true
    doses?: true
    info?: true
    status?: true
    manufacturer_id?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type VaccineMaxAggregateInputType = {
    id?: true
    name?: true
    doses?: true
    info?: true
    status?: true
    manufacturer_id?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type VaccineCountAggregateInputType = {
    id?: true
    name?: true
    doses?: true
    info?: true
    status?: true
    manufacturer_id?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type VaccineAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which vaccine to aggregate.
     */
    where?: vaccineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vaccines to fetch.
     */
    orderBy?: Enumerable<vaccineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: vaccineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vaccines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vaccines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned vaccines
    **/
    _count?: true | VaccineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VaccineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VaccineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VaccineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VaccineMaxAggregateInputType
  }

  export type GetVaccineAggregateType<T extends VaccineAggregateArgs> = {
        [P in keyof T & keyof AggregateVaccine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVaccine[P]>
      : GetScalarType<T[P], AggregateVaccine[P]>
  }




  export type VaccineGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: vaccineWhereInput
    orderBy?: Enumerable<vaccineOrderByWithAggregationInput>
    by: VaccineScalarFieldEnum[]
    having?: vaccineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VaccineCountAggregateInputType | true
    _avg?: VaccineAvgAggregateInputType
    _sum?: VaccineSumAggregateInputType
    _min?: VaccineMinAggregateInputType
    _max?: VaccineMaxAggregateInputType
  }


  export type VaccineGroupByOutputType = {
    id: number
    name: string
    doses: number | null
    info: string | null
    status: VaccineStatus
    manufacturer_id: number
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: VaccineCountAggregateOutputType | null
    _avg: VaccineAvgAggregateOutputType | null
    _sum: VaccineSumAggregateOutputType | null
    _min: VaccineMinAggregateOutputType | null
    _max: VaccineMaxAggregateOutputType | null
  }

  type GetVaccineGroupByPayload<T extends VaccineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VaccineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VaccineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VaccineGroupByOutputType[P]>
            : GetScalarType<T[P], VaccineGroupByOutputType[P]>
        }
      >
    >


  export type vaccineSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    doses?: boolean
    info?: boolean
    status?: boolean
    manufacturer_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    manufacturer?: boolean | usersArgs<ExtArgs>
    dispatch?: boolean | vaccine$dispatchArgs<ExtArgs>
    _count?: boolean | VaccineCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["vaccine"]>

  export type vaccineSelectScalar = {
    id?: boolean
    name?: boolean
    doses?: boolean
    info?: boolean
    status?: boolean
    manufacturer_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type vaccineInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    manufacturer?: boolean | usersArgs<ExtArgs>
    dispatch?: boolean | vaccine$dispatchArgs<ExtArgs>
    _count?: boolean | VaccineCountOutputTypeArgs<ExtArgs>
  }


  type vaccineGetPayload<S extends boolean | null | undefined | vaccineArgs> = $Types.GetResult<vaccinePayload, S>

  type vaccineCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<vaccineFindManyArgs, 'select' | 'include'> & {
      select?: VaccineCountAggregateInputType | true
    }

  export interface vaccineDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['vaccine'], meta: { name: 'vaccine' } }
    /**
     * Find zero or one Vaccine that matches the filter.
     * @param {vaccineFindUniqueArgs} args - Arguments to find a Vaccine
     * @example
     * // Get one Vaccine
     * const vaccine = await prisma.vaccine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends vaccineFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, vaccineFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'vaccine'> extends True ? Prisma__vaccineClient<$Types.GetResult<vaccinePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__vaccineClient<$Types.GetResult<vaccinePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Vaccine that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {vaccineFindUniqueOrThrowArgs} args - Arguments to find a Vaccine
     * @example
     * // Get one Vaccine
     * const vaccine = await prisma.vaccine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends vaccineFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, vaccineFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__vaccineClient<$Types.GetResult<vaccinePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Vaccine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vaccineFindFirstArgs} args - Arguments to find a Vaccine
     * @example
     * // Get one Vaccine
     * const vaccine = await prisma.vaccine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends vaccineFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, vaccineFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'vaccine'> extends True ? Prisma__vaccineClient<$Types.GetResult<vaccinePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__vaccineClient<$Types.GetResult<vaccinePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Vaccine that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vaccineFindFirstOrThrowArgs} args - Arguments to find a Vaccine
     * @example
     * // Get one Vaccine
     * const vaccine = await prisma.vaccine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends vaccineFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, vaccineFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__vaccineClient<$Types.GetResult<vaccinePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Vaccines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vaccineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vaccines
     * const vaccines = await prisma.vaccine.findMany()
     * 
     * // Get first 10 Vaccines
     * const vaccines = await prisma.vaccine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vaccineWithIdOnly = await prisma.vaccine.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends vaccineFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, vaccineFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<vaccinePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Vaccine.
     * @param {vaccineCreateArgs} args - Arguments to create a Vaccine.
     * @example
     * // Create one Vaccine
     * const Vaccine = await prisma.vaccine.create({
     *   data: {
     *     // ... data to create a Vaccine
     *   }
     * })
     * 
    **/
    create<T extends vaccineCreateArgs<ExtArgs>>(
      args: SelectSubset<T, vaccineCreateArgs<ExtArgs>>
    ): Prisma__vaccineClient<$Types.GetResult<vaccinePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Vaccines.
     *     @param {vaccineCreateManyArgs} args - Arguments to create many Vaccines.
     *     @example
     *     // Create many Vaccines
     *     const vaccine = await prisma.vaccine.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends vaccineCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, vaccineCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vaccine.
     * @param {vaccineDeleteArgs} args - Arguments to delete one Vaccine.
     * @example
     * // Delete one Vaccine
     * const Vaccine = await prisma.vaccine.delete({
     *   where: {
     *     // ... filter to delete one Vaccine
     *   }
     * })
     * 
    **/
    delete<T extends vaccineDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, vaccineDeleteArgs<ExtArgs>>
    ): Prisma__vaccineClient<$Types.GetResult<vaccinePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Vaccine.
     * @param {vaccineUpdateArgs} args - Arguments to update one Vaccine.
     * @example
     * // Update one Vaccine
     * const vaccine = await prisma.vaccine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends vaccineUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, vaccineUpdateArgs<ExtArgs>>
    ): Prisma__vaccineClient<$Types.GetResult<vaccinePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Vaccines.
     * @param {vaccineDeleteManyArgs} args - Arguments to filter Vaccines to delete.
     * @example
     * // Delete a few Vaccines
     * const { count } = await prisma.vaccine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends vaccineDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, vaccineDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vaccines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vaccineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vaccines
     * const vaccine = await prisma.vaccine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends vaccineUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, vaccineUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vaccine.
     * @param {vaccineUpsertArgs} args - Arguments to update or create a Vaccine.
     * @example
     * // Update or create a Vaccine
     * const vaccine = await prisma.vaccine.upsert({
     *   create: {
     *     // ... data to create a Vaccine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vaccine we want to update
     *   }
     * })
    **/
    upsert<T extends vaccineUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, vaccineUpsertArgs<ExtArgs>>
    ): Prisma__vaccineClient<$Types.GetResult<vaccinePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Vaccines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vaccineCountArgs} args - Arguments to filter Vaccines to count.
     * @example
     * // Count the number of Vaccines
     * const count = await prisma.vaccine.count({
     *   where: {
     *     // ... the filter for the Vaccines we want to count
     *   }
     * })
    **/
    count<T extends vaccineCountArgs>(
      args?: Subset<T, vaccineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VaccineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vaccine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VaccineAggregateArgs>(args: Subset<T, VaccineAggregateArgs>): Prisma.PrismaPromise<GetVaccineAggregateType<T>>

    /**
     * Group by Vaccine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VaccineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VaccineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VaccineGroupByArgs['orderBy'] }
        : { orderBy?: VaccineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VaccineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVaccineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for vaccine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__vaccineClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    manufacturer<T extends usersArgs<ExtArgs> = {}>(args?: Subset<T, usersArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    dispatch<T extends vaccine$dispatchArgs<ExtArgs> = {}>(args?: Subset<T, vaccine$dispatchArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * vaccine base type for findUnique actions
   */
  export type vaccineFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vaccine
     */
    select?: vaccineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vaccineInclude<ExtArgs> | null
    /**
     * Filter, which vaccine to fetch.
     */
    where: vaccineWhereUniqueInput
  }

  /**
   * vaccine findUnique
   */
  export interface vaccineFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends vaccineFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * vaccine findUniqueOrThrow
   */
  export type vaccineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vaccine
     */
    select?: vaccineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vaccineInclude<ExtArgs> | null
    /**
     * Filter, which vaccine to fetch.
     */
    where: vaccineWhereUniqueInput
  }


  /**
   * vaccine base type for findFirst actions
   */
  export type vaccineFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vaccine
     */
    select?: vaccineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vaccineInclude<ExtArgs> | null
    /**
     * Filter, which vaccine to fetch.
     */
    where?: vaccineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vaccines to fetch.
     */
    orderBy?: Enumerable<vaccineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for vaccines.
     */
    cursor?: vaccineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vaccines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vaccines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of vaccines.
     */
    distinct?: Enumerable<VaccineScalarFieldEnum>
  }

  /**
   * vaccine findFirst
   */
  export interface vaccineFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends vaccineFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * vaccine findFirstOrThrow
   */
  export type vaccineFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vaccine
     */
    select?: vaccineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vaccineInclude<ExtArgs> | null
    /**
     * Filter, which vaccine to fetch.
     */
    where?: vaccineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vaccines to fetch.
     */
    orderBy?: Enumerable<vaccineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for vaccines.
     */
    cursor?: vaccineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vaccines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vaccines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of vaccines.
     */
    distinct?: Enumerable<VaccineScalarFieldEnum>
  }


  /**
   * vaccine findMany
   */
  export type vaccineFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vaccine
     */
    select?: vaccineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vaccineInclude<ExtArgs> | null
    /**
     * Filter, which vaccines to fetch.
     */
    where?: vaccineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vaccines to fetch.
     */
    orderBy?: Enumerable<vaccineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing vaccines.
     */
    cursor?: vaccineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vaccines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vaccines.
     */
    skip?: number
    distinct?: Enumerable<VaccineScalarFieldEnum>
  }


  /**
   * vaccine create
   */
  export type vaccineCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vaccine
     */
    select?: vaccineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vaccineInclude<ExtArgs> | null
    /**
     * The data needed to create a vaccine.
     */
    data: XOR<vaccineCreateInput, vaccineUncheckedCreateInput>
  }


  /**
   * vaccine createMany
   */
  export type vaccineCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many vaccines.
     */
    data: Enumerable<vaccineCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * vaccine update
   */
  export type vaccineUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vaccine
     */
    select?: vaccineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vaccineInclude<ExtArgs> | null
    /**
     * The data needed to update a vaccine.
     */
    data: XOR<vaccineUpdateInput, vaccineUncheckedUpdateInput>
    /**
     * Choose, which vaccine to update.
     */
    where: vaccineWhereUniqueInput
  }


  /**
   * vaccine updateMany
   */
  export type vaccineUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update vaccines.
     */
    data: XOR<vaccineUpdateManyMutationInput, vaccineUncheckedUpdateManyInput>
    /**
     * Filter which vaccines to update
     */
    where?: vaccineWhereInput
  }


  /**
   * vaccine upsert
   */
  export type vaccineUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vaccine
     */
    select?: vaccineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vaccineInclude<ExtArgs> | null
    /**
     * The filter to search for the vaccine to update in case it exists.
     */
    where: vaccineWhereUniqueInput
    /**
     * In case the vaccine found by the `where` argument doesn't exist, create a new vaccine with this data.
     */
    create: XOR<vaccineCreateInput, vaccineUncheckedCreateInput>
    /**
     * In case the vaccine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<vaccineUpdateInput, vaccineUncheckedUpdateInput>
  }


  /**
   * vaccine delete
   */
  export type vaccineDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vaccine
     */
    select?: vaccineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vaccineInclude<ExtArgs> | null
    /**
     * Filter which vaccine to delete.
     */
    where: vaccineWhereUniqueInput
  }


  /**
   * vaccine deleteMany
   */
  export type vaccineDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which vaccines to delete
     */
    where?: vaccineWhereInput
  }


  /**
   * vaccine.dispatch
   */
  export type vaccine$dispatchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
    where?: dispatchWhereInput
    orderBy?: Enumerable<dispatchOrderByWithRelationInput>
    cursor?: dispatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DispatchScalarFieldEnum>
  }


  /**
   * vaccine without action
   */
  export type vaccineArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vaccine
     */
    select?: vaccineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vaccineInclude<ExtArgs> | null
  }



  /**
   * Model dispatch
   */


  export type AggregateDispatch = {
    _count: DispatchCountAggregateOutputType | null
    _avg: DispatchAvgAggregateOutputType | null
    _sum: DispatchSumAggregateOutputType | null
    _min: DispatchMinAggregateOutputType | null
    _max: DispatchMaxAggregateOutputType | null
  }

  export type DispatchAvgAggregateOutputType = {
    id: number | null
    vaccine_id: number | null
    civilian_id: number | null
    institute_id: number | null
    staff_id: number | null
  }

  export type DispatchSumAggregateOutputType = {
    id: number | null
    vaccine_id: number | null
    civilian_id: number | null
    institute_id: number | null
    staff_id: number | null
  }

  export type DispatchMinAggregateOutputType = {
    id: number | null
    vaccine_id: number | null
    batch_id: string | null
    status: DispatchStatus | null
    civilian_id: number | null
    institute_id: number | null
    staff_id: number | null
    request_date: Date | null
    dispatch_date: Date | null
    receive_date: Date | null
    vaccination_date: Date | null
  }

  export type DispatchMaxAggregateOutputType = {
    id: number | null
    vaccine_id: number | null
    batch_id: string | null
    status: DispatchStatus | null
    civilian_id: number | null
    institute_id: number | null
    staff_id: number | null
    request_date: Date | null
    dispatch_date: Date | null
    receive_date: Date | null
    vaccination_date: Date | null
  }

  export type DispatchCountAggregateOutputType = {
    id: number
    vaccine_id: number
    batch_id: number
    status: number
    civilian_id: number
    institute_id: number
    staff_id: number
    request_date: number
    dispatch_date: number
    receive_date: number
    vaccination_date: number
    _all: number
  }


  export type DispatchAvgAggregateInputType = {
    id?: true
    vaccine_id?: true
    civilian_id?: true
    institute_id?: true
    staff_id?: true
  }

  export type DispatchSumAggregateInputType = {
    id?: true
    vaccine_id?: true
    civilian_id?: true
    institute_id?: true
    staff_id?: true
  }

  export type DispatchMinAggregateInputType = {
    id?: true
    vaccine_id?: true
    batch_id?: true
    status?: true
    civilian_id?: true
    institute_id?: true
    staff_id?: true
    request_date?: true
    dispatch_date?: true
    receive_date?: true
    vaccination_date?: true
  }

  export type DispatchMaxAggregateInputType = {
    id?: true
    vaccine_id?: true
    batch_id?: true
    status?: true
    civilian_id?: true
    institute_id?: true
    staff_id?: true
    request_date?: true
    dispatch_date?: true
    receive_date?: true
    vaccination_date?: true
  }

  export type DispatchCountAggregateInputType = {
    id?: true
    vaccine_id?: true
    batch_id?: true
    status?: true
    civilian_id?: true
    institute_id?: true
    staff_id?: true
    request_date?: true
    dispatch_date?: true
    receive_date?: true
    vaccination_date?: true
    _all?: true
  }

  export type DispatchAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which dispatch to aggregate.
     */
    where?: dispatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dispatches to fetch.
     */
    orderBy?: Enumerable<dispatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: dispatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dispatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dispatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned dispatches
    **/
    _count?: true | DispatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DispatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DispatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DispatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DispatchMaxAggregateInputType
  }

  export type GetDispatchAggregateType<T extends DispatchAggregateArgs> = {
        [P in keyof T & keyof AggregateDispatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDispatch[P]>
      : GetScalarType<T[P], AggregateDispatch[P]>
  }




  export type DispatchGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: dispatchWhereInput
    orderBy?: Enumerable<dispatchOrderByWithAggregationInput>
    by: DispatchScalarFieldEnum[]
    having?: dispatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DispatchCountAggregateInputType | true
    _avg?: DispatchAvgAggregateInputType
    _sum?: DispatchSumAggregateInputType
    _min?: DispatchMinAggregateInputType
    _max?: DispatchMaxAggregateInputType
  }


  export type DispatchGroupByOutputType = {
    id: number
    vaccine_id: number
    batch_id: string
    status: DispatchStatus
    civilian_id: number | null
    institute_id: number
    staff_id: number | null
    request_date: Date
    dispatch_date: Date | null
    receive_date: Date | null
    vaccination_date: Date | null
    _count: DispatchCountAggregateOutputType | null
    _avg: DispatchAvgAggregateOutputType | null
    _sum: DispatchSumAggregateOutputType | null
    _min: DispatchMinAggregateOutputType | null
    _max: DispatchMaxAggregateOutputType | null
  }

  type GetDispatchGroupByPayload<T extends DispatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DispatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DispatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DispatchGroupByOutputType[P]>
            : GetScalarType<T[P], DispatchGroupByOutputType[P]>
        }
      >
    >


  export type dispatchSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vaccine_id?: boolean
    batch_id?: boolean
    status?: boolean
    civilian_id?: boolean
    institute_id?: boolean
    staff_id?: boolean
    request_date?: boolean
    dispatch_date?: boolean
    receive_date?: boolean
    vaccination_date?: boolean
    vaccine?: boolean | vaccineArgs<ExtArgs>
    civilian?: boolean | civilianArgs<ExtArgs>
    institute?: boolean | usersArgs<ExtArgs>
    staff?: boolean | usersArgs<ExtArgs>
  }, ExtArgs["result"]["dispatch"]>

  export type dispatchSelectScalar = {
    id?: boolean
    vaccine_id?: boolean
    batch_id?: boolean
    status?: boolean
    civilian_id?: boolean
    institute_id?: boolean
    staff_id?: boolean
    request_date?: boolean
    dispatch_date?: boolean
    receive_date?: boolean
    vaccination_date?: boolean
  }

  export type dispatchInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    vaccine?: boolean | vaccineArgs<ExtArgs>
    civilian?: boolean | civilianArgs<ExtArgs>
    institute?: boolean | usersArgs<ExtArgs>
    staff?: boolean | usersArgs<ExtArgs>
  }


  type dispatchGetPayload<S extends boolean | null | undefined | dispatchArgs> = $Types.GetResult<dispatchPayload, S>

  type dispatchCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<dispatchFindManyArgs, 'select' | 'include'> & {
      select?: DispatchCountAggregateInputType | true
    }

  export interface dispatchDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['dispatch'], meta: { name: 'dispatch' } }
    /**
     * Find zero or one Dispatch that matches the filter.
     * @param {dispatchFindUniqueArgs} args - Arguments to find a Dispatch
     * @example
     * // Get one Dispatch
     * const dispatch = await prisma.dispatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends dispatchFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, dispatchFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'dispatch'> extends True ? Prisma__dispatchClient<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__dispatchClient<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Dispatch that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {dispatchFindUniqueOrThrowArgs} args - Arguments to find a Dispatch
     * @example
     * // Get one Dispatch
     * const dispatch = await prisma.dispatch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends dispatchFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, dispatchFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__dispatchClient<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Dispatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispatchFindFirstArgs} args - Arguments to find a Dispatch
     * @example
     * // Get one Dispatch
     * const dispatch = await prisma.dispatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends dispatchFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, dispatchFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'dispatch'> extends True ? Prisma__dispatchClient<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__dispatchClient<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Dispatch that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispatchFindFirstOrThrowArgs} args - Arguments to find a Dispatch
     * @example
     * // Get one Dispatch
     * const dispatch = await prisma.dispatch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends dispatchFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, dispatchFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__dispatchClient<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Dispatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dispatches
     * const dispatches = await prisma.dispatch.findMany()
     * 
     * // Get first 10 Dispatches
     * const dispatches = await prisma.dispatch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dispatchWithIdOnly = await prisma.dispatch.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends dispatchFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dispatchFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Dispatch.
     * @param {dispatchCreateArgs} args - Arguments to create a Dispatch.
     * @example
     * // Create one Dispatch
     * const Dispatch = await prisma.dispatch.create({
     *   data: {
     *     // ... data to create a Dispatch
     *   }
     * })
     * 
    **/
    create<T extends dispatchCreateArgs<ExtArgs>>(
      args: SelectSubset<T, dispatchCreateArgs<ExtArgs>>
    ): Prisma__dispatchClient<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Dispatches.
     *     @param {dispatchCreateManyArgs} args - Arguments to create many Dispatches.
     *     @example
     *     // Create many Dispatches
     *     const dispatch = await prisma.dispatch.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends dispatchCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dispatchCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dispatch.
     * @param {dispatchDeleteArgs} args - Arguments to delete one Dispatch.
     * @example
     * // Delete one Dispatch
     * const Dispatch = await prisma.dispatch.delete({
     *   where: {
     *     // ... filter to delete one Dispatch
     *   }
     * })
     * 
    **/
    delete<T extends dispatchDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, dispatchDeleteArgs<ExtArgs>>
    ): Prisma__dispatchClient<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Dispatch.
     * @param {dispatchUpdateArgs} args - Arguments to update one Dispatch.
     * @example
     * // Update one Dispatch
     * const dispatch = await prisma.dispatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends dispatchUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, dispatchUpdateArgs<ExtArgs>>
    ): Prisma__dispatchClient<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Dispatches.
     * @param {dispatchDeleteManyArgs} args - Arguments to filter Dispatches to delete.
     * @example
     * // Delete a few Dispatches
     * const { count } = await prisma.dispatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends dispatchDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dispatchDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dispatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dispatches
     * const dispatch = await prisma.dispatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends dispatchUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, dispatchUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dispatch.
     * @param {dispatchUpsertArgs} args - Arguments to update or create a Dispatch.
     * @example
     * // Update or create a Dispatch
     * const dispatch = await prisma.dispatch.upsert({
     *   create: {
     *     // ... data to create a Dispatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dispatch we want to update
     *   }
     * })
    **/
    upsert<T extends dispatchUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, dispatchUpsertArgs<ExtArgs>>
    ): Prisma__dispatchClient<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Dispatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispatchCountArgs} args - Arguments to filter Dispatches to count.
     * @example
     * // Count the number of Dispatches
     * const count = await prisma.dispatch.count({
     *   where: {
     *     // ... the filter for the Dispatches we want to count
     *   }
     * })
    **/
    count<T extends dispatchCountArgs>(
      args?: Subset<T, dispatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DispatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dispatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DispatchAggregateArgs>(args: Subset<T, DispatchAggregateArgs>): Prisma.PrismaPromise<GetDispatchAggregateType<T>>

    /**
     * Group by Dispatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DispatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DispatchGroupByArgs['orderBy'] }
        : { orderBy?: DispatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DispatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDispatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for dispatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__dispatchClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    vaccine<T extends vaccineArgs<ExtArgs> = {}>(args?: Subset<T, vaccineArgs<ExtArgs>>): Prisma__vaccineClient<$Types.GetResult<vaccinePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    civilian<T extends civilianArgs<ExtArgs> = {}>(args?: Subset<T, civilianArgs<ExtArgs>>): Prisma__civilianClient<$Types.GetResult<civilianPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    institute<T extends usersArgs<ExtArgs> = {}>(args?: Subset<T, usersArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    staff<T extends usersArgs<ExtArgs> = {}>(args?: Subset<T, usersArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * dispatch base type for findUnique actions
   */
  export type dispatchFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
    /**
     * Filter, which dispatch to fetch.
     */
    where: dispatchWhereUniqueInput
  }

  /**
   * dispatch findUnique
   */
  export interface dispatchFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends dispatchFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * dispatch findUniqueOrThrow
   */
  export type dispatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
    /**
     * Filter, which dispatch to fetch.
     */
    where: dispatchWhereUniqueInput
  }


  /**
   * dispatch base type for findFirst actions
   */
  export type dispatchFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
    /**
     * Filter, which dispatch to fetch.
     */
    where?: dispatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dispatches to fetch.
     */
    orderBy?: Enumerable<dispatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dispatches.
     */
    cursor?: dispatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dispatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dispatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dispatches.
     */
    distinct?: Enumerable<DispatchScalarFieldEnum>
  }

  /**
   * dispatch findFirst
   */
  export interface dispatchFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends dispatchFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * dispatch findFirstOrThrow
   */
  export type dispatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
    /**
     * Filter, which dispatch to fetch.
     */
    where?: dispatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dispatches to fetch.
     */
    orderBy?: Enumerable<dispatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dispatches.
     */
    cursor?: dispatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dispatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dispatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dispatches.
     */
    distinct?: Enumerable<DispatchScalarFieldEnum>
  }


  /**
   * dispatch findMany
   */
  export type dispatchFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
    /**
     * Filter, which dispatches to fetch.
     */
    where?: dispatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dispatches to fetch.
     */
    orderBy?: Enumerable<dispatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing dispatches.
     */
    cursor?: dispatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dispatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dispatches.
     */
    skip?: number
    distinct?: Enumerable<DispatchScalarFieldEnum>
  }


  /**
   * dispatch create
   */
  export type dispatchCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
    /**
     * The data needed to create a dispatch.
     */
    data: XOR<dispatchCreateInput, dispatchUncheckedCreateInput>
  }


  /**
   * dispatch createMany
   */
  export type dispatchCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many dispatches.
     */
    data: Enumerable<dispatchCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * dispatch update
   */
  export type dispatchUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
    /**
     * The data needed to update a dispatch.
     */
    data: XOR<dispatchUpdateInput, dispatchUncheckedUpdateInput>
    /**
     * Choose, which dispatch to update.
     */
    where: dispatchWhereUniqueInput
  }


  /**
   * dispatch updateMany
   */
  export type dispatchUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update dispatches.
     */
    data: XOR<dispatchUpdateManyMutationInput, dispatchUncheckedUpdateManyInput>
    /**
     * Filter which dispatches to update
     */
    where?: dispatchWhereInput
  }


  /**
   * dispatch upsert
   */
  export type dispatchUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
    /**
     * The filter to search for the dispatch to update in case it exists.
     */
    where: dispatchWhereUniqueInput
    /**
     * In case the dispatch found by the `where` argument doesn't exist, create a new dispatch with this data.
     */
    create: XOR<dispatchCreateInput, dispatchUncheckedCreateInput>
    /**
     * In case the dispatch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<dispatchUpdateInput, dispatchUncheckedUpdateInput>
  }


  /**
   * dispatch delete
   */
  export type dispatchDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
    /**
     * Filter which dispatch to delete.
     */
    where: dispatchWhereUniqueInput
  }


  /**
   * dispatch deleteMany
   */
  export type dispatchDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which dispatches to delete
     */
    where?: dispatchWhereInput
  }


  /**
   * dispatch without action
   */
  export type dispatchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
  }



  /**
   * Model civilian
   */


  export type AggregateCivilian = {
    _count: CivilianCountAggregateOutputType | null
    _avg: CivilianAvgAggregateOutputType | null
    _sum: CivilianSumAggregateOutputType | null
    _min: CivilianMinAggregateOutputType | null
    _max: CivilianMaxAggregateOutputType | null
  }

  export type CivilianAvgAggregateOutputType = {
    id: number | null
  }

  export type CivilianSumAggregateOutputType = {
    id: number | null
  }

  export type CivilianMinAggregateOutputType = {
    id: number | null
    cnic: string | null
    name: string | null
    date_of_birth: Date | null
    gender: Gender | null
    contact: string | null
  }

  export type CivilianMaxAggregateOutputType = {
    id: number | null
    cnic: string | null
    name: string | null
    date_of_birth: Date | null
    gender: Gender | null
    contact: string | null
  }

  export type CivilianCountAggregateOutputType = {
    id: number
    cnic: number
    name: number
    date_of_birth: number
    gender: number
    contact: number
    _all: number
  }


  export type CivilianAvgAggregateInputType = {
    id?: true
  }

  export type CivilianSumAggregateInputType = {
    id?: true
  }

  export type CivilianMinAggregateInputType = {
    id?: true
    cnic?: true
    name?: true
    date_of_birth?: true
    gender?: true
    contact?: true
  }

  export type CivilianMaxAggregateInputType = {
    id?: true
    cnic?: true
    name?: true
    date_of_birth?: true
    gender?: true
    contact?: true
  }

  export type CivilianCountAggregateInputType = {
    id?: true
    cnic?: true
    name?: true
    date_of_birth?: true
    gender?: true
    contact?: true
    _all?: true
  }

  export type CivilianAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which civilian to aggregate.
     */
    where?: civilianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of civilians to fetch.
     */
    orderBy?: Enumerable<civilianOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: civilianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` civilians from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` civilians.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned civilians
    **/
    _count?: true | CivilianCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CivilianAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CivilianSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CivilianMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CivilianMaxAggregateInputType
  }

  export type GetCivilianAggregateType<T extends CivilianAggregateArgs> = {
        [P in keyof T & keyof AggregateCivilian]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCivilian[P]>
      : GetScalarType<T[P], AggregateCivilian[P]>
  }




  export type CivilianGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: civilianWhereInput
    orderBy?: Enumerable<civilianOrderByWithAggregationInput>
    by: CivilianScalarFieldEnum[]
    having?: civilianScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CivilianCountAggregateInputType | true
    _avg?: CivilianAvgAggregateInputType
    _sum?: CivilianSumAggregateInputType
    _min?: CivilianMinAggregateInputType
    _max?: CivilianMaxAggregateInputType
  }


  export type CivilianGroupByOutputType = {
    id: number
    cnic: string
    name: string
    date_of_birth: Date | null
    gender: Gender
    contact: string
    _count: CivilianCountAggregateOutputType | null
    _avg: CivilianAvgAggregateOutputType | null
    _sum: CivilianSumAggregateOutputType | null
    _min: CivilianMinAggregateOutputType | null
    _max: CivilianMaxAggregateOutputType | null
  }

  type GetCivilianGroupByPayload<T extends CivilianGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CivilianGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CivilianGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CivilianGroupByOutputType[P]>
            : GetScalarType<T[P], CivilianGroupByOutputType[P]>
        }
      >
    >


  export type civilianSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cnic?: boolean
    name?: boolean
    date_of_birth?: boolean
    gender?: boolean
    contact?: boolean
    dispatch?: boolean | civilian$dispatchArgs<ExtArgs>
    _count?: boolean | CivilianCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["civilian"]>

  export type civilianSelectScalar = {
    id?: boolean
    cnic?: boolean
    name?: boolean
    date_of_birth?: boolean
    gender?: boolean
    contact?: boolean
  }

  export type civilianInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    dispatch?: boolean | civilian$dispatchArgs<ExtArgs>
    _count?: boolean | CivilianCountOutputTypeArgs<ExtArgs>
  }


  type civilianGetPayload<S extends boolean | null | undefined | civilianArgs> = $Types.GetResult<civilianPayload, S>

  type civilianCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<civilianFindManyArgs, 'select' | 'include'> & {
      select?: CivilianCountAggregateInputType | true
    }

  export interface civilianDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['civilian'], meta: { name: 'civilian' } }
    /**
     * Find zero or one Civilian that matches the filter.
     * @param {civilianFindUniqueArgs} args - Arguments to find a Civilian
     * @example
     * // Get one Civilian
     * const civilian = await prisma.civilian.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends civilianFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, civilianFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'civilian'> extends True ? Prisma__civilianClient<$Types.GetResult<civilianPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__civilianClient<$Types.GetResult<civilianPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Civilian that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {civilianFindUniqueOrThrowArgs} args - Arguments to find a Civilian
     * @example
     * // Get one Civilian
     * const civilian = await prisma.civilian.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends civilianFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, civilianFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__civilianClient<$Types.GetResult<civilianPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Civilian that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {civilianFindFirstArgs} args - Arguments to find a Civilian
     * @example
     * // Get one Civilian
     * const civilian = await prisma.civilian.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends civilianFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, civilianFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'civilian'> extends True ? Prisma__civilianClient<$Types.GetResult<civilianPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__civilianClient<$Types.GetResult<civilianPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Civilian that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {civilianFindFirstOrThrowArgs} args - Arguments to find a Civilian
     * @example
     * // Get one Civilian
     * const civilian = await prisma.civilian.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends civilianFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, civilianFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__civilianClient<$Types.GetResult<civilianPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Civilians that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {civilianFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Civilians
     * const civilians = await prisma.civilian.findMany()
     * 
     * // Get first 10 Civilians
     * const civilians = await prisma.civilian.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const civilianWithIdOnly = await prisma.civilian.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends civilianFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, civilianFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<civilianPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Civilian.
     * @param {civilianCreateArgs} args - Arguments to create a Civilian.
     * @example
     * // Create one Civilian
     * const Civilian = await prisma.civilian.create({
     *   data: {
     *     // ... data to create a Civilian
     *   }
     * })
     * 
    **/
    create<T extends civilianCreateArgs<ExtArgs>>(
      args: SelectSubset<T, civilianCreateArgs<ExtArgs>>
    ): Prisma__civilianClient<$Types.GetResult<civilianPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Civilians.
     *     @param {civilianCreateManyArgs} args - Arguments to create many Civilians.
     *     @example
     *     // Create many Civilians
     *     const civilian = await prisma.civilian.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends civilianCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, civilianCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Civilian.
     * @param {civilianDeleteArgs} args - Arguments to delete one Civilian.
     * @example
     * // Delete one Civilian
     * const Civilian = await prisma.civilian.delete({
     *   where: {
     *     // ... filter to delete one Civilian
     *   }
     * })
     * 
    **/
    delete<T extends civilianDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, civilianDeleteArgs<ExtArgs>>
    ): Prisma__civilianClient<$Types.GetResult<civilianPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Civilian.
     * @param {civilianUpdateArgs} args - Arguments to update one Civilian.
     * @example
     * // Update one Civilian
     * const civilian = await prisma.civilian.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends civilianUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, civilianUpdateArgs<ExtArgs>>
    ): Prisma__civilianClient<$Types.GetResult<civilianPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Civilians.
     * @param {civilianDeleteManyArgs} args - Arguments to filter Civilians to delete.
     * @example
     * // Delete a few Civilians
     * const { count } = await prisma.civilian.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends civilianDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, civilianDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Civilians.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {civilianUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Civilians
     * const civilian = await prisma.civilian.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends civilianUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, civilianUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Civilian.
     * @param {civilianUpsertArgs} args - Arguments to update or create a Civilian.
     * @example
     * // Update or create a Civilian
     * const civilian = await prisma.civilian.upsert({
     *   create: {
     *     // ... data to create a Civilian
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Civilian we want to update
     *   }
     * })
    **/
    upsert<T extends civilianUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, civilianUpsertArgs<ExtArgs>>
    ): Prisma__civilianClient<$Types.GetResult<civilianPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Civilians.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {civilianCountArgs} args - Arguments to filter Civilians to count.
     * @example
     * // Count the number of Civilians
     * const count = await prisma.civilian.count({
     *   where: {
     *     // ... the filter for the Civilians we want to count
     *   }
     * })
    **/
    count<T extends civilianCountArgs>(
      args?: Subset<T, civilianCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CivilianCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Civilian.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CivilianAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CivilianAggregateArgs>(args: Subset<T, CivilianAggregateArgs>): Prisma.PrismaPromise<GetCivilianAggregateType<T>>

    /**
     * Group by Civilian.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CivilianGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CivilianGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CivilianGroupByArgs['orderBy'] }
        : { orderBy?: CivilianGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CivilianGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCivilianGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for civilian.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__civilianClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    dispatch<T extends civilian$dispatchArgs<ExtArgs> = {}>(args?: Subset<T, civilian$dispatchArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<dispatchPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * civilian base type for findUnique actions
   */
  export type civilianFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the civilian
     */
    select?: civilianSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: civilianInclude<ExtArgs> | null
    /**
     * Filter, which civilian to fetch.
     */
    where: civilianWhereUniqueInput
  }

  /**
   * civilian findUnique
   */
  export interface civilianFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends civilianFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * civilian findUniqueOrThrow
   */
  export type civilianFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the civilian
     */
    select?: civilianSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: civilianInclude<ExtArgs> | null
    /**
     * Filter, which civilian to fetch.
     */
    where: civilianWhereUniqueInput
  }


  /**
   * civilian base type for findFirst actions
   */
  export type civilianFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the civilian
     */
    select?: civilianSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: civilianInclude<ExtArgs> | null
    /**
     * Filter, which civilian to fetch.
     */
    where?: civilianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of civilians to fetch.
     */
    orderBy?: Enumerable<civilianOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for civilians.
     */
    cursor?: civilianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` civilians from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` civilians.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of civilians.
     */
    distinct?: Enumerable<CivilianScalarFieldEnum>
  }

  /**
   * civilian findFirst
   */
  export interface civilianFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends civilianFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * civilian findFirstOrThrow
   */
  export type civilianFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the civilian
     */
    select?: civilianSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: civilianInclude<ExtArgs> | null
    /**
     * Filter, which civilian to fetch.
     */
    where?: civilianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of civilians to fetch.
     */
    orderBy?: Enumerable<civilianOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for civilians.
     */
    cursor?: civilianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` civilians from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` civilians.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of civilians.
     */
    distinct?: Enumerable<CivilianScalarFieldEnum>
  }


  /**
   * civilian findMany
   */
  export type civilianFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the civilian
     */
    select?: civilianSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: civilianInclude<ExtArgs> | null
    /**
     * Filter, which civilians to fetch.
     */
    where?: civilianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of civilians to fetch.
     */
    orderBy?: Enumerable<civilianOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing civilians.
     */
    cursor?: civilianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` civilians from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` civilians.
     */
    skip?: number
    distinct?: Enumerable<CivilianScalarFieldEnum>
  }


  /**
   * civilian create
   */
  export type civilianCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the civilian
     */
    select?: civilianSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: civilianInclude<ExtArgs> | null
    /**
     * The data needed to create a civilian.
     */
    data: XOR<civilianCreateInput, civilianUncheckedCreateInput>
  }


  /**
   * civilian createMany
   */
  export type civilianCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many civilians.
     */
    data: Enumerable<civilianCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * civilian update
   */
  export type civilianUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the civilian
     */
    select?: civilianSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: civilianInclude<ExtArgs> | null
    /**
     * The data needed to update a civilian.
     */
    data: XOR<civilianUpdateInput, civilianUncheckedUpdateInput>
    /**
     * Choose, which civilian to update.
     */
    where: civilianWhereUniqueInput
  }


  /**
   * civilian updateMany
   */
  export type civilianUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update civilians.
     */
    data: XOR<civilianUpdateManyMutationInput, civilianUncheckedUpdateManyInput>
    /**
     * Filter which civilians to update
     */
    where?: civilianWhereInput
  }


  /**
   * civilian upsert
   */
  export type civilianUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the civilian
     */
    select?: civilianSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: civilianInclude<ExtArgs> | null
    /**
     * The filter to search for the civilian to update in case it exists.
     */
    where: civilianWhereUniqueInput
    /**
     * In case the civilian found by the `where` argument doesn't exist, create a new civilian with this data.
     */
    create: XOR<civilianCreateInput, civilianUncheckedCreateInput>
    /**
     * In case the civilian was found with the provided `where` argument, update it with this data.
     */
    update: XOR<civilianUpdateInput, civilianUncheckedUpdateInput>
  }


  /**
   * civilian delete
   */
  export type civilianDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the civilian
     */
    select?: civilianSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: civilianInclude<ExtArgs> | null
    /**
     * Filter which civilian to delete.
     */
    where: civilianWhereUniqueInput
  }


  /**
   * civilian deleteMany
   */
  export type civilianDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which civilians to delete
     */
    where?: civilianWhereInput
  }


  /**
   * civilian.dispatch
   */
  export type civilian$dispatchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatch
     */
    select?: dispatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispatchInclude<ExtArgs> | null
    where?: dispatchWhereInput
    orderBy?: Enumerable<dispatchOrderByWithRelationInput>
    cursor?: dispatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DispatchScalarFieldEnum>
  }


  /**
   * civilian without action
   */
  export type civilianArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the civilian
     */
    select?: civilianSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: civilianInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    contact: 'contact',
    license: 'license',
    gender: 'gender',
    type: 'type',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    date_of_birth: 'date_of_birth',
    cnic: 'cnic',
    location: 'location',
    institute_id: 'institute_id'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const VaccineScalarFieldEnum: {
    id: 'id',
    name: 'name',
    doses: 'doses',
    info: 'info',
    status: 'status',
    manufacturer_id: 'manufacturer_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type VaccineScalarFieldEnum = (typeof VaccineScalarFieldEnum)[keyof typeof VaccineScalarFieldEnum]


  export const DispatchScalarFieldEnum: {
    id: 'id',
    vaccine_id: 'vaccine_id',
    batch_id: 'batch_id',
    status: 'status',
    civilian_id: 'civilian_id',
    institute_id: 'institute_id',
    staff_id: 'staff_id',
    request_date: 'request_date',
    dispatch_date: 'dispatch_date',
    receive_date: 'receive_date',
    vaccination_date: 'vaccination_date'
  };

  export type DispatchScalarFieldEnum = (typeof DispatchScalarFieldEnum)[keyof typeof DispatchScalarFieldEnum]


  export const CivilianScalarFieldEnum: {
    id: 'id',
    cnic: 'cnic',
    name: 'name',
    date_of_birth: 'date_of_birth',
    gender: 'gender',
    contact: 'contact'
  };

  export type CivilianScalarFieldEnum = (typeof CivilianScalarFieldEnum)[keyof typeof CivilianScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringNullableFilter | string | null
    name?: StringFilter | string
    contact?: StringNullableFilter | string | null
    license?: StringNullableFilter | string | null
    gender?: EnumGenderNullableFilter | Gender | null
    type?: EnumUserTypeFilter | UserType
    status?: EnumUserStatusFilter | UserStatus
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeNullableFilter | Date | string | null
    deletedAt?: DateTimeNullableFilter | Date | string | null
    date_of_birth?: DateTimeNullableFilter | Date | string | null
    cnic?: StringNullableFilter | string | null
    location?: StringNullableFilter | string | null
    institute_id?: IntNullableFilter | number | null
    institute?: XOR<UsersRelationFilter, usersWhereInput> | null
    staff?: UsersListRelationFilter
    vaccines?: VaccineListRelationFilter
    dispatch?: DispatchListRelationFilter
    staff_dispatch?: DispatchListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrder
    contact?: SortOrderInput | SortOrder
    license?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    date_of_birth?: SortOrderInput | SortOrder
    cnic?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    institute_id?: SortOrderInput | SortOrder
    institute?: usersOrderByWithRelationInput
    staff?: usersOrderByRelationAggregateInput
    vaccines?: vaccineOrderByRelationAggregateInput
    dispatch?: dispatchOrderByRelationAggregateInput
    staff_dispatch?: dispatchOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrder
    contact?: SortOrderInput | SortOrder
    license?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    date_of_birth?: SortOrderInput | SortOrder
    cnic?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    institute_id?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringNullableWithAggregatesFilter | string | null
    name?: StringWithAggregatesFilter | string
    contact?: StringNullableWithAggregatesFilter | string | null
    license?: StringNullableWithAggregatesFilter | string | null
    gender?: EnumGenderNullableWithAggregatesFilter | Gender | null
    type?: EnumUserTypeWithAggregatesFilter | UserType
    status?: EnumUserStatusWithAggregatesFilter | UserStatus
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    date_of_birth?: DateTimeNullableWithAggregatesFilter | Date | string | null
    cnic?: StringNullableWithAggregatesFilter | string | null
    location?: StringNullableWithAggregatesFilter | string | null
    institute_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type vaccineWhereInput = {
    AND?: Enumerable<vaccineWhereInput>
    OR?: Enumerable<vaccineWhereInput>
    NOT?: Enumerable<vaccineWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    doses?: IntNullableFilter | number | null
    info?: StringNullableFilter | string | null
    status?: EnumVaccineStatusFilter | VaccineStatus
    manufacturer_id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deletedAt?: DateTimeNullableFilter | Date | string | null
    manufacturer?: XOR<UsersRelationFilter, usersWhereInput>
    dispatch?: DispatchListRelationFilter
  }

  export type vaccineOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    doses?: SortOrderInput | SortOrder
    info?: SortOrderInput | SortOrder
    status?: SortOrder
    manufacturer_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    manufacturer?: usersOrderByWithRelationInput
    dispatch?: dispatchOrderByRelationAggregateInput
  }

  export type vaccineWhereUniqueInput = {
    id?: number
  }

  export type vaccineOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    doses?: SortOrderInput | SortOrder
    info?: SortOrderInput | SortOrder
    status?: SortOrder
    manufacturer_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: vaccineCountOrderByAggregateInput
    _avg?: vaccineAvgOrderByAggregateInput
    _max?: vaccineMaxOrderByAggregateInput
    _min?: vaccineMinOrderByAggregateInput
    _sum?: vaccineSumOrderByAggregateInput
  }

  export type vaccineScalarWhereWithAggregatesInput = {
    AND?: Enumerable<vaccineScalarWhereWithAggregatesInput>
    OR?: Enumerable<vaccineScalarWhereWithAggregatesInput>
    NOT?: Enumerable<vaccineScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    doses?: IntNullableWithAggregatesFilter | number | null
    info?: StringNullableWithAggregatesFilter | string | null
    status?: EnumVaccineStatusWithAggregatesFilter | VaccineStatus
    manufacturer_id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type dispatchWhereInput = {
    AND?: Enumerable<dispatchWhereInput>
    OR?: Enumerable<dispatchWhereInput>
    NOT?: Enumerable<dispatchWhereInput>
    id?: IntFilter | number
    vaccine_id?: IntFilter | number
    batch_id?: StringFilter | string
    status?: EnumDispatchStatusFilter | DispatchStatus
    civilian_id?: IntNullableFilter | number | null
    institute_id?: IntFilter | number
    staff_id?: IntNullableFilter | number | null
    request_date?: DateTimeFilter | Date | string
    dispatch_date?: DateTimeNullableFilter | Date | string | null
    receive_date?: DateTimeNullableFilter | Date | string | null
    vaccination_date?: DateTimeNullableFilter | Date | string | null
    vaccine?: XOR<VaccineRelationFilter, vaccineWhereInput>
    civilian?: XOR<CivilianRelationFilter, civilianWhereInput> | null
    institute?: XOR<UsersRelationFilter, usersWhereInput>
    staff?: XOR<UsersRelationFilter, usersWhereInput> | null
  }

  export type dispatchOrderByWithRelationInput = {
    id?: SortOrder
    vaccine_id?: SortOrder
    batch_id?: SortOrder
    status?: SortOrder
    civilian_id?: SortOrderInput | SortOrder
    institute_id?: SortOrder
    staff_id?: SortOrderInput | SortOrder
    request_date?: SortOrder
    dispatch_date?: SortOrderInput | SortOrder
    receive_date?: SortOrderInput | SortOrder
    vaccination_date?: SortOrderInput | SortOrder
    vaccine?: vaccineOrderByWithRelationInput
    civilian?: civilianOrderByWithRelationInput
    institute?: usersOrderByWithRelationInput
    staff?: usersOrderByWithRelationInput
  }

  export type dispatchWhereUniqueInput = {
    id?: number
  }

  export type dispatchOrderByWithAggregationInput = {
    id?: SortOrder
    vaccine_id?: SortOrder
    batch_id?: SortOrder
    status?: SortOrder
    civilian_id?: SortOrderInput | SortOrder
    institute_id?: SortOrder
    staff_id?: SortOrderInput | SortOrder
    request_date?: SortOrder
    dispatch_date?: SortOrderInput | SortOrder
    receive_date?: SortOrderInput | SortOrder
    vaccination_date?: SortOrderInput | SortOrder
    _count?: dispatchCountOrderByAggregateInput
    _avg?: dispatchAvgOrderByAggregateInput
    _max?: dispatchMaxOrderByAggregateInput
    _min?: dispatchMinOrderByAggregateInput
    _sum?: dispatchSumOrderByAggregateInput
  }

  export type dispatchScalarWhereWithAggregatesInput = {
    AND?: Enumerable<dispatchScalarWhereWithAggregatesInput>
    OR?: Enumerable<dispatchScalarWhereWithAggregatesInput>
    NOT?: Enumerable<dispatchScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    vaccine_id?: IntWithAggregatesFilter | number
    batch_id?: StringWithAggregatesFilter | string
    status?: EnumDispatchStatusWithAggregatesFilter | DispatchStatus
    civilian_id?: IntNullableWithAggregatesFilter | number | null
    institute_id?: IntWithAggregatesFilter | number
    staff_id?: IntNullableWithAggregatesFilter | number | null
    request_date?: DateTimeWithAggregatesFilter | Date | string
    dispatch_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    receive_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    vaccination_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type civilianWhereInput = {
    AND?: Enumerable<civilianWhereInput>
    OR?: Enumerable<civilianWhereInput>
    NOT?: Enumerable<civilianWhereInput>
    id?: IntFilter | number
    cnic?: StringFilter | string
    name?: StringFilter | string
    date_of_birth?: DateTimeNullableFilter | Date | string | null
    gender?: EnumGenderFilter | Gender
    contact?: StringFilter | string
    dispatch?: DispatchListRelationFilter
  }

  export type civilianOrderByWithRelationInput = {
    id?: SortOrder
    cnic?: SortOrder
    name?: SortOrder
    date_of_birth?: SortOrderInput | SortOrder
    gender?: SortOrder
    contact?: SortOrder
    dispatch?: dispatchOrderByRelationAggregateInput
  }

  export type civilianWhereUniqueInput = {
    id?: number
    cnic?: string
  }

  export type civilianOrderByWithAggregationInput = {
    id?: SortOrder
    cnic?: SortOrder
    name?: SortOrder
    date_of_birth?: SortOrderInput | SortOrder
    gender?: SortOrder
    contact?: SortOrder
    _count?: civilianCountOrderByAggregateInput
    _avg?: civilianAvgOrderByAggregateInput
    _max?: civilianMaxOrderByAggregateInput
    _min?: civilianMinOrderByAggregateInput
    _sum?: civilianSumOrderByAggregateInput
  }

  export type civilianScalarWhereWithAggregatesInput = {
    AND?: Enumerable<civilianScalarWhereWithAggregatesInput>
    OR?: Enumerable<civilianScalarWhereWithAggregatesInput>
    NOT?: Enumerable<civilianScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    cnic?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    date_of_birth?: DateTimeNullableWithAggregatesFilter | Date | string | null
    gender?: EnumGenderWithAggregatesFilter | Gender
    contact?: StringWithAggregatesFilter | string
  }

  export type usersCreateInput = {
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
    institute?: usersCreateNestedOneWithoutStaffInput
    staff?: usersCreateNestedManyWithoutInstituteInput
    vaccines?: vaccineCreateNestedManyWithoutManufacturerInput
    dispatch?: dispatchCreateNestedManyWithoutInstituteInput
    staff_dispatch?: dispatchCreateNestedManyWithoutStaffInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
    institute_id?: number | null
    staff?: usersUncheckedCreateNestedManyWithoutInstituteInput
    vaccines?: vaccineUncheckedCreateNestedManyWithoutManufacturerInput
    dispatch?: dispatchUncheckedCreateNestedManyWithoutInstituteInput
    staff_dispatch?: dispatchUncheckedCreateNestedManyWithoutStaffInput
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    institute?: usersUpdateOneWithoutStaffNestedInput
    staff?: usersUpdateManyWithoutInstituteNestedInput
    vaccines?: vaccineUpdateManyWithoutManufacturerNestedInput
    dispatch?: dispatchUpdateManyWithoutInstituteNestedInput
    staff_dispatch?: dispatchUpdateManyWithoutStaffNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    institute_id?: NullableIntFieldUpdateOperationsInput | number | null
    staff?: usersUncheckedUpdateManyWithoutInstituteNestedInput
    vaccines?: vaccineUncheckedUpdateManyWithoutManufacturerNestedInput
    dispatch?: dispatchUncheckedUpdateManyWithoutInstituteNestedInput
    staff_dispatch?: dispatchUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
    institute_id?: number | null
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    institute_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type vaccineCreateInput = {
    name: string
    doses?: number | null
    info?: string | null
    status?: VaccineStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    manufacturer: usersCreateNestedOneWithoutVaccinesInput
    dispatch?: dispatchCreateNestedManyWithoutVaccineInput
  }

  export type vaccineUncheckedCreateInput = {
    id?: number
    name: string
    doses?: number | null
    info?: string | null
    status?: VaccineStatus
    manufacturer_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    dispatch?: dispatchUncheckedCreateNestedManyWithoutVaccineInput
  }

  export type vaccineUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVaccineStatusFieldUpdateOperationsInput | VaccineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manufacturer?: usersUpdateOneRequiredWithoutVaccinesNestedInput
    dispatch?: dispatchUpdateManyWithoutVaccineNestedInput
  }

  export type vaccineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVaccineStatusFieldUpdateOperationsInput | VaccineStatus
    manufacturer_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dispatch?: dispatchUncheckedUpdateManyWithoutVaccineNestedInput
  }

  export type vaccineCreateManyInput = {
    id?: number
    name: string
    doses?: number | null
    info?: string | null
    status?: VaccineStatus
    manufacturer_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type vaccineUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVaccineStatusFieldUpdateOperationsInput | VaccineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type vaccineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVaccineStatusFieldUpdateOperationsInput | VaccineStatus
    manufacturer_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dispatchCreateInput = {
    batch_id: string
    status?: DispatchStatus
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
    vaccine: vaccineCreateNestedOneWithoutDispatchInput
    civilian?: civilianCreateNestedOneWithoutDispatchInput
    institute: usersCreateNestedOneWithoutDispatchInput
    staff?: usersCreateNestedOneWithoutStaff_dispatchInput
  }

  export type dispatchUncheckedCreateInput = {
    id?: number
    vaccine_id: number
    batch_id: string
    status?: DispatchStatus
    civilian_id?: number | null
    institute_id: number
    staff_id?: number | null
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
  }

  export type dispatchUpdateInput = {
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccine?: vaccineUpdateOneRequiredWithoutDispatchNestedInput
    civilian?: civilianUpdateOneWithoutDispatchNestedInput
    institute?: usersUpdateOneRequiredWithoutDispatchNestedInput
    staff?: usersUpdateOneWithoutStaff_dispatchNestedInput
  }

  export type dispatchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    vaccine_id?: IntFieldUpdateOperationsInput | number
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    civilian_id?: NullableIntFieldUpdateOperationsInput | number | null
    institute_id?: IntFieldUpdateOperationsInput | number
    staff_id?: NullableIntFieldUpdateOperationsInput | number | null
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dispatchCreateManyInput = {
    id?: number
    vaccine_id: number
    batch_id: string
    status?: DispatchStatus
    civilian_id?: number | null
    institute_id: number
    staff_id?: number | null
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
  }

  export type dispatchUpdateManyMutationInput = {
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dispatchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    vaccine_id?: IntFieldUpdateOperationsInput | number
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    civilian_id?: NullableIntFieldUpdateOperationsInput | number | null
    institute_id?: IntFieldUpdateOperationsInput | number
    staff_id?: NullableIntFieldUpdateOperationsInput | number | null
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type civilianCreateInput = {
    cnic: string
    name: string
    date_of_birth?: Date | string | null
    gender: Gender
    contact: string
    dispatch?: dispatchCreateNestedManyWithoutCivilianInput
  }

  export type civilianUncheckedCreateInput = {
    id?: number
    cnic: string
    name: string
    date_of_birth?: Date | string | null
    gender: Gender
    contact: string
    dispatch?: dispatchUncheckedCreateNestedManyWithoutCivilianInput
  }

  export type civilianUpdateInput = {
    cnic?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | Gender
    contact?: StringFieldUpdateOperationsInput | string
    dispatch?: dispatchUpdateManyWithoutCivilianNestedInput
  }

  export type civilianUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnic?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | Gender
    contact?: StringFieldUpdateOperationsInput | string
    dispatch?: dispatchUncheckedUpdateManyWithoutCivilianNestedInput
  }

  export type civilianCreateManyInput = {
    id?: number
    cnic: string
    name: string
    date_of_birth?: Date | string | null
    gender: Gender
    contact: string
  }

  export type civilianUpdateManyMutationInput = {
    cnic?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | Gender
    contact?: StringFieldUpdateOperationsInput | string
  }

  export type civilianUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnic?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | Gender
    contact?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumGenderNullableFilter = {
    equals?: Gender | null
    in?: Enumerable<Gender> | null
    notIn?: Enumerable<Gender> | null
    not?: NestedEnumGenderNullableFilter | Gender | null
  }

  export type EnumUserTypeFilter = {
    equals?: UserType
    in?: Enumerable<UserType>
    notIn?: Enumerable<UserType>
    not?: NestedEnumUserTypeFilter | UserType
  }

  export type EnumUserStatusFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusFilter | UserStatus
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type VaccineListRelationFilter = {
    every?: vaccineWhereInput
    some?: vaccineWhereInput
    none?: vaccineWhereInput
  }

  export type DispatchListRelationFilter = {
    every?: dispatchWhereInput
    some?: dispatchWhereInput
    none?: dispatchWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type vaccineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type dispatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    contact?: SortOrder
    license?: SortOrder
    gender?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    date_of_birth?: SortOrder
    cnic?: SortOrder
    location?: SortOrder
    institute_id?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    institute_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    contact?: SortOrder
    license?: SortOrder
    gender?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    date_of_birth?: SortOrder
    cnic?: SortOrder
    location?: SortOrder
    institute_id?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    contact?: SortOrder
    license?: SortOrder
    gender?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    date_of_birth?: SortOrder
    cnic?: SortOrder
    location?: SortOrder
    institute_id?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    institute_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumGenderNullableWithAggregatesFilter = {
    equals?: Gender | null
    in?: Enumerable<Gender> | null
    notIn?: Enumerable<Gender> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter | Gender | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumGenderNullableFilter
    _max?: NestedEnumGenderNullableFilter
  }

  export type EnumUserTypeWithAggregatesFilter = {
    equals?: UserType
    in?: Enumerable<UserType>
    notIn?: Enumerable<UserType>
    not?: NestedEnumUserTypeWithAggregatesFilter | UserType
    _count?: NestedIntFilter
    _min?: NestedEnumUserTypeFilter
    _max?: NestedEnumUserTypeFilter
  }

  export type EnumUserStatusWithAggregatesFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusWithAggregatesFilter | UserStatus
    _count?: NestedIntFilter
    _min?: NestedEnumUserStatusFilter
    _max?: NestedEnumUserStatusFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type EnumVaccineStatusFilter = {
    equals?: VaccineStatus
    in?: Enumerable<VaccineStatus>
    notIn?: Enumerable<VaccineStatus>
    not?: NestedEnumVaccineStatusFilter | VaccineStatus
  }

  export type vaccineCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    doses?: SortOrder
    info?: SortOrder
    status?: SortOrder
    manufacturer_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type vaccineAvgOrderByAggregateInput = {
    id?: SortOrder
    doses?: SortOrder
    manufacturer_id?: SortOrder
  }

  export type vaccineMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    doses?: SortOrder
    info?: SortOrder
    status?: SortOrder
    manufacturer_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type vaccineMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    doses?: SortOrder
    info?: SortOrder
    status?: SortOrder
    manufacturer_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type vaccineSumOrderByAggregateInput = {
    id?: SortOrder
    doses?: SortOrder
    manufacturer_id?: SortOrder
  }

  export type EnumVaccineStatusWithAggregatesFilter = {
    equals?: VaccineStatus
    in?: Enumerable<VaccineStatus>
    notIn?: Enumerable<VaccineStatus>
    not?: NestedEnumVaccineStatusWithAggregatesFilter | VaccineStatus
    _count?: NestedIntFilter
    _min?: NestedEnumVaccineStatusFilter
    _max?: NestedEnumVaccineStatusFilter
  }

  export type EnumDispatchStatusFilter = {
    equals?: DispatchStatus
    in?: Enumerable<DispatchStatus>
    notIn?: Enumerable<DispatchStatus>
    not?: NestedEnumDispatchStatusFilter | DispatchStatus
  }

  export type VaccineRelationFilter = {
    is?: vaccineWhereInput | null
    isNot?: vaccineWhereInput | null
  }

  export type CivilianRelationFilter = {
    is?: civilianWhereInput | null
    isNot?: civilianWhereInput | null
  }

  export type dispatchCountOrderByAggregateInput = {
    id?: SortOrder
    vaccine_id?: SortOrder
    batch_id?: SortOrder
    status?: SortOrder
    civilian_id?: SortOrder
    institute_id?: SortOrder
    staff_id?: SortOrder
    request_date?: SortOrder
    dispatch_date?: SortOrder
    receive_date?: SortOrder
    vaccination_date?: SortOrder
  }

  export type dispatchAvgOrderByAggregateInput = {
    id?: SortOrder
    vaccine_id?: SortOrder
    civilian_id?: SortOrder
    institute_id?: SortOrder
    staff_id?: SortOrder
  }

  export type dispatchMaxOrderByAggregateInput = {
    id?: SortOrder
    vaccine_id?: SortOrder
    batch_id?: SortOrder
    status?: SortOrder
    civilian_id?: SortOrder
    institute_id?: SortOrder
    staff_id?: SortOrder
    request_date?: SortOrder
    dispatch_date?: SortOrder
    receive_date?: SortOrder
    vaccination_date?: SortOrder
  }

  export type dispatchMinOrderByAggregateInput = {
    id?: SortOrder
    vaccine_id?: SortOrder
    batch_id?: SortOrder
    status?: SortOrder
    civilian_id?: SortOrder
    institute_id?: SortOrder
    staff_id?: SortOrder
    request_date?: SortOrder
    dispatch_date?: SortOrder
    receive_date?: SortOrder
    vaccination_date?: SortOrder
  }

  export type dispatchSumOrderByAggregateInput = {
    id?: SortOrder
    vaccine_id?: SortOrder
    civilian_id?: SortOrder
    institute_id?: SortOrder
    staff_id?: SortOrder
  }

  export type EnumDispatchStatusWithAggregatesFilter = {
    equals?: DispatchStatus
    in?: Enumerable<DispatchStatus>
    notIn?: Enumerable<DispatchStatus>
    not?: NestedEnumDispatchStatusWithAggregatesFilter | DispatchStatus
    _count?: NestedIntFilter
    _min?: NestedEnumDispatchStatusFilter
    _max?: NestedEnumDispatchStatusFilter
  }

  export type EnumGenderFilter = {
    equals?: Gender
    in?: Enumerable<Gender>
    notIn?: Enumerable<Gender>
    not?: NestedEnumGenderFilter | Gender
  }

  export type civilianCountOrderByAggregateInput = {
    id?: SortOrder
    cnic?: SortOrder
    name?: SortOrder
    date_of_birth?: SortOrder
    gender?: SortOrder
    contact?: SortOrder
  }

  export type civilianAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type civilianMaxOrderByAggregateInput = {
    id?: SortOrder
    cnic?: SortOrder
    name?: SortOrder
    date_of_birth?: SortOrder
    gender?: SortOrder
    contact?: SortOrder
  }

  export type civilianMinOrderByAggregateInput = {
    id?: SortOrder
    cnic?: SortOrder
    name?: SortOrder
    date_of_birth?: SortOrder
    gender?: SortOrder
    contact?: SortOrder
  }

  export type civilianSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumGenderWithAggregatesFilter = {
    equals?: Gender
    in?: Enumerable<Gender>
    notIn?: Enumerable<Gender>
    not?: NestedEnumGenderWithAggregatesFilter | Gender
    _count?: NestedIntFilter
    _min?: NestedEnumGenderFilter
    _max?: NestedEnumGenderFilter
  }

  export type usersCreateNestedOneWithoutStaffInput = {
    create?: XOR<usersCreateWithoutStaffInput, usersUncheckedCreateWithoutStaffInput>
    connectOrCreate?: usersCreateOrConnectWithoutStaffInput
    connect?: usersWhereUniqueInput
  }

  export type usersCreateNestedManyWithoutInstituteInput = {
    create?: XOR<Enumerable<usersCreateWithoutInstituteInput>, Enumerable<usersUncheckedCreateWithoutInstituteInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutInstituteInput>
    createMany?: usersCreateManyInstituteInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type vaccineCreateNestedManyWithoutManufacturerInput = {
    create?: XOR<Enumerable<vaccineCreateWithoutManufacturerInput>, Enumerable<vaccineUncheckedCreateWithoutManufacturerInput>>
    connectOrCreate?: Enumerable<vaccineCreateOrConnectWithoutManufacturerInput>
    createMany?: vaccineCreateManyManufacturerInputEnvelope
    connect?: Enumerable<vaccineWhereUniqueInput>
  }

  export type dispatchCreateNestedManyWithoutInstituteInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutInstituteInput>, Enumerable<dispatchUncheckedCreateWithoutInstituteInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutInstituteInput>
    createMany?: dispatchCreateManyInstituteInputEnvelope
    connect?: Enumerable<dispatchWhereUniqueInput>
  }

  export type dispatchCreateNestedManyWithoutStaffInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutStaffInput>, Enumerable<dispatchUncheckedCreateWithoutStaffInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutStaffInput>
    createMany?: dispatchCreateManyStaffInputEnvelope
    connect?: Enumerable<dispatchWhereUniqueInput>
  }

  export type usersUncheckedCreateNestedManyWithoutInstituteInput = {
    create?: XOR<Enumerable<usersCreateWithoutInstituteInput>, Enumerable<usersUncheckedCreateWithoutInstituteInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutInstituteInput>
    createMany?: usersCreateManyInstituteInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type vaccineUncheckedCreateNestedManyWithoutManufacturerInput = {
    create?: XOR<Enumerable<vaccineCreateWithoutManufacturerInput>, Enumerable<vaccineUncheckedCreateWithoutManufacturerInput>>
    connectOrCreate?: Enumerable<vaccineCreateOrConnectWithoutManufacturerInput>
    createMany?: vaccineCreateManyManufacturerInputEnvelope
    connect?: Enumerable<vaccineWhereUniqueInput>
  }

  export type dispatchUncheckedCreateNestedManyWithoutInstituteInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutInstituteInput>, Enumerable<dispatchUncheckedCreateWithoutInstituteInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutInstituteInput>
    createMany?: dispatchCreateManyInstituteInputEnvelope
    connect?: Enumerable<dispatchWhereUniqueInput>
  }

  export type dispatchUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutStaffInput>, Enumerable<dispatchUncheckedCreateWithoutStaffInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutStaffInput>
    createMany?: dispatchCreateManyStaffInputEnvelope
    connect?: Enumerable<dispatchWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumGenderFieldUpdateOperationsInput = {
    set?: Gender | null
  }

  export type EnumUserTypeFieldUpdateOperationsInput = {
    set?: UserType
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: UserStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type usersUpdateOneWithoutStaffNestedInput = {
    create?: XOR<usersCreateWithoutStaffInput, usersUncheckedCreateWithoutStaffInput>
    connectOrCreate?: usersCreateOrConnectWithoutStaffInput
    upsert?: usersUpsertWithoutStaffInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutStaffInput, usersUncheckedUpdateWithoutStaffInput>
  }

  export type usersUpdateManyWithoutInstituteNestedInput = {
    create?: XOR<Enumerable<usersCreateWithoutInstituteInput>, Enumerable<usersUncheckedCreateWithoutInstituteInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutInstituteInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutInstituteInput>
    createMany?: usersCreateManyInstituteInputEnvelope
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    connect?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutInstituteInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutInstituteInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type vaccineUpdateManyWithoutManufacturerNestedInput = {
    create?: XOR<Enumerable<vaccineCreateWithoutManufacturerInput>, Enumerable<vaccineUncheckedCreateWithoutManufacturerInput>>
    connectOrCreate?: Enumerable<vaccineCreateOrConnectWithoutManufacturerInput>
    upsert?: Enumerable<vaccineUpsertWithWhereUniqueWithoutManufacturerInput>
    createMany?: vaccineCreateManyManufacturerInputEnvelope
    set?: Enumerable<vaccineWhereUniqueInput>
    disconnect?: Enumerable<vaccineWhereUniqueInput>
    delete?: Enumerable<vaccineWhereUniqueInput>
    connect?: Enumerable<vaccineWhereUniqueInput>
    update?: Enumerable<vaccineUpdateWithWhereUniqueWithoutManufacturerInput>
    updateMany?: Enumerable<vaccineUpdateManyWithWhereWithoutManufacturerInput>
    deleteMany?: Enumerable<vaccineScalarWhereInput>
  }

  export type dispatchUpdateManyWithoutInstituteNestedInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutInstituteInput>, Enumerable<dispatchUncheckedCreateWithoutInstituteInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutInstituteInput>
    upsert?: Enumerable<dispatchUpsertWithWhereUniqueWithoutInstituteInput>
    createMany?: dispatchCreateManyInstituteInputEnvelope
    set?: Enumerable<dispatchWhereUniqueInput>
    disconnect?: Enumerable<dispatchWhereUniqueInput>
    delete?: Enumerable<dispatchWhereUniqueInput>
    connect?: Enumerable<dispatchWhereUniqueInput>
    update?: Enumerable<dispatchUpdateWithWhereUniqueWithoutInstituteInput>
    updateMany?: Enumerable<dispatchUpdateManyWithWhereWithoutInstituteInput>
    deleteMany?: Enumerable<dispatchScalarWhereInput>
  }

  export type dispatchUpdateManyWithoutStaffNestedInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutStaffInput>, Enumerable<dispatchUncheckedCreateWithoutStaffInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutStaffInput>
    upsert?: Enumerable<dispatchUpsertWithWhereUniqueWithoutStaffInput>
    createMany?: dispatchCreateManyStaffInputEnvelope
    set?: Enumerable<dispatchWhereUniqueInput>
    disconnect?: Enumerable<dispatchWhereUniqueInput>
    delete?: Enumerable<dispatchWhereUniqueInput>
    connect?: Enumerable<dispatchWhereUniqueInput>
    update?: Enumerable<dispatchUpdateWithWhereUniqueWithoutStaffInput>
    updateMany?: Enumerable<dispatchUpdateManyWithWhereWithoutStaffInput>
    deleteMany?: Enumerable<dispatchScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersUncheckedUpdateManyWithoutInstituteNestedInput = {
    create?: XOR<Enumerable<usersCreateWithoutInstituteInput>, Enumerable<usersUncheckedCreateWithoutInstituteInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutInstituteInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutInstituteInput>
    createMany?: usersCreateManyInstituteInputEnvelope
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    connect?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutInstituteInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutInstituteInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type vaccineUncheckedUpdateManyWithoutManufacturerNestedInput = {
    create?: XOR<Enumerable<vaccineCreateWithoutManufacturerInput>, Enumerable<vaccineUncheckedCreateWithoutManufacturerInput>>
    connectOrCreate?: Enumerable<vaccineCreateOrConnectWithoutManufacturerInput>
    upsert?: Enumerable<vaccineUpsertWithWhereUniqueWithoutManufacturerInput>
    createMany?: vaccineCreateManyManufacturerInputEnvelope
    set?: Enumerable<vaccineWhereUniqueInput>
    disconnect?: Enumerable<vaccineWhereUniqueInput>
    delete?: Enumerable<vaccineWhereUniqueInput>
    connect?: Enumerable<vaccineWhereUniqueInput>
    update?: Enumerable<vaccineUpdateWithWhereUniqueWithoutManufacturerInput>
    updateMany?: Enumerable<vaccineUpdateManyWithWhereWithoutManufacturerInput>
    deleteMany?: Enumerable<vaccineScalarWhereInput>
  }

  export type dispatchUncheckedUpdateManyWithoutInstituteNestedInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutInstituteInput>, Enumerable<dispatchUncheckedCreateWithoutInstituteInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutInstituteInput>
    upsert?: Enumerable<dispatchUpsertWithWhereUniqueWithoutInstituteInput>
    createMany?: dispatchCreateManyInstituteInputEnvelope
    set?: Enumerable<dispatchWhereUniqueInput>
    disconnect?: Enumerable<dispatchWhereUniqueInput>
    delete?: Enumerable<dispatchWhereUniqueInput>
    connect?: Enumerable<dispatchWhereUniqueInput>
    update?: Enumerable<dispatchUpdateWithWhereUniqueWithoutInstituteInput>
    updateMany?: Enumerable<dispatchUpdateManyWithWhereWithoutInstituteInput>
    deleteMany?: Enumerable<dispatchScalarWhereInput>
  }

  export type dispatchUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutStaffInput>, Enumerable<dispatchUncheckedCreateWithoutStaffInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutStaffInput>
    upsert?: Enumerable<dispatchUpsertWithWhereUniqueWithoutStaffInput>
    createMany?: dispatchCreateManyStaffInputEnvelope
    set?: Enumerable<dispatchWhereUniqueInput>
    disconnect?: Enumerable<dispatchWhereUniqueInput>
    delete?: Enumerable<dispatchWhereUniqueInput>
    connect?: Enumerable<dispatchWhereUniqueInput>
    update?: Enumerable<dispatchUpdateWithWhereUniqueWithoutStaffInput>
    updateMany?: Enumerable<dispatchUpdateManyWithWhereWithoutStaffInput>
    deleteMany?: Enumerable<dispatchScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutVaccinesInput = {
    create?: XOR<usersCreateWithoutVaccinesInput, usersUncheckedCreateWithoutVaccinesInput>
    connectOrCreate?: usersCreateOrConnectWithoutVaccinesInput
    connect?: usersWhereUniqueInput
  }

  export type dispatchCreateNestedManyWithoutVaccineInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutVaccineInput>, Enumerable<dispatchUncheckedCreateWithoutVaccineInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutVaccineInput>
    createMany?: dispatchCreateManyVaccineInputEnvelope
    connect?: Enumerable<dispatchWhereUniqueInput>
  }

  export type dispatchUncheckedCreateNestedManyWithoutVaccineInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutVaccineInput>, Enumerable<dispatchUncheckedCreateWithoutVaccineInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutVaccineInput>
    createMany?: dispatchCreateManyVaccineInputEnvelope
    connect?: Enumerable<dispatchWhereUniqueInput>
  }

  export type EnumVaccineStatusFieldUpdateOperationsInput = {
    set?: VaccineStatus
  }

  export type usersUpdateOneRequiredWithoutVaccinesNestedInput = {
    create?: XOR<usersCreateWithoutVaccinesInput, usersUncheckedCreateWithoutVaccinesInput>
    connectOrCreate?: usersCreateOrConnectWithoutVaccinesInput
    upsert?: usersUpsertWithoutVaccinesInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutVaccinesInput, usersUncheckedUpdateWithoutVaccinesInput>
  }

  export type dispatchUpdateManyWithoutVaccineNestedInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutVaccineInput>, Enumerable<dispatchUncheckedCreateWithoutVaccineInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutVaccineInput>
    upsert?: Enumerable<dispatchUpsertWithWhereUniqueWithoutVaccineInput>
    createMany?: dispatchCreateManyVaccineInputEnvelope
    set?: Enumerable<dispatchWhereUniqueInput>
    disconnect?: Enumerable<dispatchWhereUniqueInput>
    delete?: Enumerable<dispatchWhereUniqueInput>
    connect?: Enumerable<dispatchWhereUniqueInput>
    update?: Enumerable<dispatchUpdateWithWhereUniqueWithoutVaccineInput>
    updateMany?: Enumerable<dispatchUpdateManyWithWhereWithoutVaccineInput>
    deleteMany?: Enumerable<dispatchScalarWhereInput>
  }

  export type dispatchUncheckedUpdateManyWithoutVaccineNestedInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutVaccineInput>, Enumerable<dispatchUncheckedCreateWithoutVaccineInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutVaccineInput>
    upsert?: Enumerable<dispatchUpsertWithWhereUniqueWithoutVaccineInput>
    createMany?: dispatchCreateManyVaccineInputEnvelope
    set?: Enumerable<dispatchWhereUniqueInput>
    disconnect?: Enumerable<dispatchWhereUniqueInput>
    delete?: Enumerable<dispatchWhereUniqueInput>
    connect?: Enumerable<dispatchWhereUniqueInput>
    update?: Enumerable<dispatchUpdateWithWhereUniqueWithoutVaccineInput>
    updateMany?: Enumerable<dispatchUpdateManyWithWhereWithoutVaccineInput>
    deleteMany?: Enumerable<dispatchScalarWhereInput>
  }

  export type vaccineCreateNestedOneWithoutDispatchInput = {
    create?: XOR<vaccineCreateWithoutDispatchInput, vaccineUncheckedCreateWithoutDispatchInput>
    connectOrCreate?: vaccineCreateOrConnectWithoutDispatchInput
    connect?: vaccineWhereUniqueInput
  }

  export type civilianCreateNestedOneWithoutDispatchInput = {
    create?: XOR<civilianCreateWithoutDispatchInput, civilianUncheckedCreateWithoutDispatchInput>
    connectOrCreate?: civilianCreateOrConnectWithoutDispatchInput
    connect?: civilianWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutDispatchInput = {
    create?: XOR<usersCreateWithoutDispatchInput, usersUncheckedCreateWithoutDispatchInput>
    connectOrCreate?: usersCreateOrConnectWithoutDispatchInput
    connect?: usersWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutStaff_dispatchInput = {
    create?: XOR<usersCreateWithoutStaff_dispatchInput, usersUncheckedCreateWithoutStaff_dispatchInput>
    connectOrCreate?: usersCreateOrConnectWithoutStaff_dispatchInput
    connect?: usersWhereUniqueInput
  }

  export type EnumDispatchStatusFieldUpdateOperationsInput = {
    set?: DispatchStatus
  }

  export type vaccineUpdateOneRequiredWithoutDispatchNestedInput = {
    create?: XOR<vaccineCreateWithoutDispatchInput, vaccineUncheckedCreateWithoutDispatchInput>
    connectOrCreate?: vaccineCreateOrConnectWithoutDispatchInput
    upsert?: vaccineUpsertWithoutDispatchInput
    connect?: vaccineWhereUniqueInput
    update?: XOR<vaccineUpdateWithoutDispatchInput, vaccineUncheckedUpdateWithoutDispatchInput>
  }

  export type civilianUpdateOneWithoutDispatchNestedInput = {
    create?: XOR<civilianCreateWithoutDispatchInput, civilianUncheckedCreateWithoutDispatchInput>
    connectOrCreate?: civilianCreateOrConnectWithoutDispatchInput
    upsert?: civilianUpsertWithoutDispatchInput
    disconnect?: boolean
    delete?: boolean
    connect?: civilianWhereUniqueInput
    update?: XOR<civilianUpdateWithoutDispatchInput, civilianUncheckedUpdateWithoutDispatchInput>
  }

  export type usersUpdateOneRequiredWithoutDispatchNestedInput = {
    create?: XOR<usersCreateWithoutDispatchInput, usersUncheckedCreateWithoutDispatchInput>
    connectOrCreate?: usersCreateOrConnectWithoutDispatchInput
    upsert?: usersUpsertWithoutDispatchInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutDispatchInput, usersUncheckedUpdateWithoutDispatchInput>
  }

  export type usersUpdateOneWithoutStaff_dispatchNestedInput = {
    create?: XOR<usersCreateWithoutStaff_dispatchInput, usersUncheckedCreateWithoutStaff_dispatchInput>
    connectOrCreate?: usersCreateOrConnectWithoutStaff_dispatchInput
    upsert?: usersUpsertWithoutStaff_dispatchInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutStaff_dispatchInput, usersUncheckedUpdateWithoutStaff_dispatchInput>
  }

  export type dispatchCreateNestedManyWithoutCivilianInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutCivilianInput>, Enumerable<dispatchUncheckedCreateWithoutCivilianInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutCivilianInput>
    createMany?: dispatchCreateManyCivilianInputEnvelope
    connect?: Enumerable<dispatchWhereUniqueInput>
  }

  export type dispatchUncheckedCreateNestedManyWithoutCivilianInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutCivilianInput>, Enumerable<dispatchUncheckedCreateWithoutCivilianInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutCivilianInput>
    createMany?: dispatchCreateManyCivilianInputEnvelope
    connect?: Enumerable<dispatchWhereUniqueInput>
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: Gender
  }

  export type dispatchUpdateManyWithoutCivilianNestedInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutCivilianInput>, Enumerable<dispatchUncheckedCreateWithoutCivilianInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutCivilianInput>
    upsert?: Enumerable<dispatchUpsertWithWhereUniqueWithoutCivilianInput>
    createMany?: dispatchCreateManyCivilianInputEnvelope
    set?: Enumerable<dispatchWhereUniqueInput>
    disconnect?: Enumerable<dispatchWhereUniqueInput>
    delete?: Enumerable<dispatchWhereUniqueInput>
    connect?: Enumerable<dispatchWhereUniqueInput>
    update?: Enumerable<dispatchUpdateWithWhereUniqueWithoutCivilianInput>
    updateMany?: Enumerable<dispatchUpdateManyWithWhereWithoutCivilianInput>
    deleteMany?: Enumerable<dispatchScalarWhereInput>
  }

  export type dispatchUncheckedUpdateManyWithoutCivilianNestedInput = {
    create?: XOR<Enumerable<dispatchCreateWithoutCivilianInput>, Enumerable<dispatchUncheckedCreateWithoutCivilianInput>>
    connectOrCreate?: Enumerable<dispatchCreateOrConnectWithoutCivilianInput>
    upsert?: Enumerable<dispatchUpsertWithWhereUniqueWithoutCivilianInput>
    createMany?: dispatchCreateManyCivilianInputEnvelope
    set?: Enumerable<dispatchWhereUniqueInput>
    disconnect?: Enumerable<dispatchWhereUniqueInput>
    delete?: Enumerable<dispatchWhereUniqueInput>
    connect?: Enumerable<dispatchWhereUniqueInput>
    update?: Enumerable<dispatchUpdateWithWhereUniqueWithoutCivilianInput>
    updateMany?: Enumerable<dispatchUpdateManyWithWhereWithoutCivilianInput>
    deleteMany?: Enumerable<dispatchScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumGenderNullableFilter = {
    equals?: Gender | null
    in?: Enumerable<Gender> | null
    notIn?: Enumerable<Gender> | null
    not?: NestedEnumGenderNullableFilter | Gender | null
  }

  export type NestedEnumUserTypeFilter = {
    equals?: UserType
    in?: Enumerable<UserType>
    notIn?: Enumerable<UserType>
    not?: NestedEnumUserTypeFilter | UserType
  }

  export type NestedEnumUserStatusFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusFilter | UserStatus
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedEnumGenderNullableWithAggregatesFilter = {
    equals?: Gender | null
    in?: Enumerable<Gender> | null
    notIn?: Enumerable<Gender> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter | Gender | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumGenderNullableFilter
    _max?: NestedEnumGenderNullableFilter
  }

  export type NestedEnumUserTypeWithAggregatesFilter = {
    equals?: UserType
    in?: Enumerable<UserType>
    notIn?: Enumerable<UserType>
    not?: NestedEnumUserTypeWithAggregatesFilter | UserType
    _count?: NestedIntFilter
    _min?: NestedEnumUserTypeFilter
    _max?: NestedEnumUserTypeFilter
  }

  export type NestedEnumUserStatusWithAggregatesFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusWithAggregatesFilter | UserStatus
    _count?: NestedIntFilter
    _min?: NestedEnumUserStatusFilter
    _max?: NestedEnumUserStatusFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumVaccineStatusFilter = {
    equals?: VaccineStatus
    in?: Enumerable<VaccineStatus>
    notIn?: Enumerable<VaccineStatus>
    not?: NestedEnumVaccineStatusFilter | VaccineStatus
  }

  export type NestedEnumVaccineStatusWithAggregatesFilter = {
    equals?: VaccineStatus
    in?: Enumerable<VaccineStatus>
    notIn?: Enumerable<VaccineStatus>
    not?: NestedEnumVaccineStatusWithAggregatesFilter | VaccineStatus
    _count?: NestedIntFilter
    _min?: NestedEnumVaccineStatusFilter
    _max?: NestedEnumVaccineStatusFilter
  }

  export type NestedEnumDispatchStatusFilter = {
    equals?: DispatchStatus
    in?: Enumerable<DispatchStatus>
    notIn?: Enumerable<DispatchStatus>
    not?: NestedEnumDispatchStatusFilter | DispatchStatus
  }

  export type NestedEnumDispatchStatusWithAggregatesFilter = {
    equals?: DispatchStatus
    in?: Enumerable<DispatchStatus>
    notIn?: Enumerable<DispatchStatus>
    not?: NestedEnumDispatchStatusWithAggregatesFilter | DispatchStatus
    _count?: NestedIntFilter
    _min?: NestedEnumDispatchStatusFilter
    _max?: NestedEnumDispatchStatusFilter
  }

  export type NestedEnumGenderFilter = {
    equals?: Gender
    in?: Enumerable<Gender>
    notIn?: Enumerable<Gender>
    not?: NestedEnumGenderFilter | Gender
  }

  export type NestedEnumGenderWithAggregatesFilter = {
    equals?: Gender
    in?: Enumerable<Gender>
    notIn?: Enumerable<Gender>
    not?: NestedEnumGenderWithAggregatesFilter | Gender
    _count?: NestedIntFilter
    _min?: NestedEnumGenderFilter
    _max?: NestedEnumGenderFilter
  }

  export type usersCreateWithoutStaffInput = {
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
    institute?: usersCreateNestedOneWithoutStaffInput
    vaccines?: vaccineCreateNestedManyWithoutManufacturerInput
    dispatch?: dispatchCreateNestedManyWithoutInstituteInput
    staff_dispatch?: dispatchCreateNestedManyWithoutStaffInput
  }

  export type usersUncheckedCreateWithoutStaffInput = {
    id?: number
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
    institute_id?: number | null
    vaccines?: vaccineUncheckedCreateNestedManyWithoutManufacturerInput
    dispatch?: dispatchUncheckedCreateNestedManyWithoutInstituteInput
    staff_dispatch?: dispatchUncheckedCreateNestedManyWithoutStaffInput
  }

  export type usersCreateOrConnectWithoutStaffInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutStaffInput, usersUncheckedCreateWithoutStaffInput>
  }

  export type usersCreateWithoutInstituteInput = {
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
    staff?: usersCreateNestedManyWithoutInstituteInput
    vaccines?: vaccineCreateNestedManyWithoutManufacturerInput
    dispatch?: dispatchCreateNestedManyWithoutInstituteInput
    staff_dispatch?: dispatchCreateNestedManyWithoutStaffInput
  }

  export type usersUncheckedCreateWithoutInstituteInput = {
    id?: number
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
    staff?: usersUncheckedCreateNestedManyWithoutInstituteInput
    vaccines?: vaccineUncheckedCreateNestedManyWithoutManufacturerInput
    dispatch?: dispatchUncheckedCreateNestedManyWithoutInstituteInput
    staff_dispatch?: dispatchUncheckedCreateNestedManyWithoutStaffInput
  }

  export type usersCreateOrConnectWithoutInstituteInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutInstituteInput, usersUncheckedCreateWithoutInstituteInput>
  }

  export type usersCreateManyInstituteInputEnvelope = {
    data: Enumerable<usersCreateManyInstituteInput>
    skipDuplicates?: boolean
  }

  export type vaccineCreateWithoutManufacturerInput = {
    name: string
    doses?: number | null
    info?: string | null
    status?: VaccineStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    dispatch?: dispatchCreateNestedManyWithoutVaccineInput
  }

  export type vaccineUncheckedCreateWithoutManufacturerInput = {
    id?: number
    name: string
    doses?: number | null
    info?: string | null
    status?: VaccineStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    dispatch?: dispatchUncheckedCreateNestedManyWithoutVaccineInput
  }

  export type vaccineCreateOrConnectWithoutManufacturerInput = {
    where: vaccineWhereUniqueInput
    create: XOR<vaccineCreateWithoutManufacturerInput, vaccineUncheckedCreateWithoutManufacturerInput>
  }

  export type vaccineCreateManyManufacturerInputEnvelope = {
    data: Enumerable<vaccineCreateManyManufacturerInput>
    skipDuplicates?: boolean
  }

  export type dispatchCreateWithoutInstituteInput = {
    batch_id: string
    status?: DispatchStatus
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
    vaccine: vaccineCreateNestedOneWithoutDispatchInput
    civilian?: civilianCreateNestedOneWithoutDispatchInput
    staff?: usersCreateNestedOneWithoutStaff_dispatchInput
  }

  export type dispatchUncheckedCreateWithoutInstituteInput = {
    id?: number
    vaccine_id: number
    batch_id: string
    status?: DispatchStatus
    civilian_id?: number | null
    staff_id?: number | null
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
  }

  export type dispatchCreateOrConnectWithoutInstituteInput = {
    where: dispatchWhereUniqueInput
    create: XOR<dispatchCreateWithoutInstituteInput, dispatchUncheckedCreateWithoutInstituteInput>
  }

  export type dispatchCreateManyInstituteInputEnvelope = {
    data: Enumerable<dispatchCreateManyInstituteInput>
    skipDuplicates?: boolean
  }

  export type dispatchCreateWithoutStaffInput = {
    batch_id: string
    status?: DispatchStatus
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
    vaccine: vaccineCreateNestedOneWithoutDispatchInput
    civilian?: civilianCreateNestedOneWithoutDispatchInput
    institute: usersCreateNestedOneWithoutDispatchInput
  }

  export type dispatchUncheckedCreateWithoutStaffInput = {
    id?: number
    vaccine_id: number
    batch_id: string
    status?: DispatchStatus
    civilian_id?: number | null
    institute_id: number
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
  }

  export type dispatchCreateOrConnectWithoutStaffInput = {
    where: dispatchWhereUniqueInput
    create: XOR<dispatchCreateWithoutStaffInput, dispatchUncheckedCreateWithoutStaffInput>
  }

  export type dispatchCreateManyStaffInputEnvelope = {
    data: Enumerable<dispatchCreateManyStaffInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutStaffInput = {
    update: XOR<usersUpdateWithoutStaffInput, usersUncheckedUpdateWithoutStaffInput>
    create: XOR<usersCreateWithoutStaffInput, usersUncheckedCreateWithoutStaffInput>
  }

  export type usersUpdateWithoutStaffInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    institute?: usersUpdateOneWithoutStaffNestedInput
    vaccines?: vaccineUpdateManyWithoutManufacturerNestedInput
    dispatch?: dispatchUpdateManyWithoutInstituteNestedInput
    staff_dispatch?: dispatchUpdateManyWithoutStaffNestedInput
  }

  export type usersUncheckedUpdateWithoutStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    institute_id?: NullableIntFieldUpdateOperationsInput | number | null
    vaccines?: vaccineUncheckedUpdateManyWithoutManufacturerNestedInput
    dispatch?: dispatchUncheckedUpdateManyWithoutInstituteNestedInput
    staff_dispatch?: dispatchUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type usersUpsertWithWhereUniqueWithoutInstituteInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutInstituteInput, usersUncheckedUpdateWithoutInstituteInput>
    create: XOR<usersCreateWithoutInstituteInput, usersUncheckedCreateWithoutInstituteInput>
  }

  export type usersUpdateWithWhereUniqueWithoutInstituteInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutInstituteInput, usersUncheckedUpdateWithoutInstituteInput>
  }

  export type usersUpdateManyWithWhereWithoutInstituteInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutStaffInput>
  }

  export type usersScalarWhereInput = {
    AND?: Enumerable<usersScalarWhereInput>
    OR?: Enumerable<usersScalarWhereInput>
    NOT?: Enumerable<usersScalarWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringNullableFilter | string | null
    name?: StringFilter | string
    contact?: StringNullableFilter | string | null
    license?: StringNullableFilter | string | null
    gender?: EnumGenderNullableFilter | Gender | null
    type?: EnumUserTypeFilter | UserType
    status?: EnumUserStatusFilter | UserStatus
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeNullableFilter | Date | string | null
    deletedAt?: DateTimeNullableFilter | Date | string | null
    date_of_birth?: DateTimeNullableFilter | Date | string | null
    cnic?: StringNullableFilter | string | null
    location?: StringNullableFilter | string | null
    institute_id?: IntNullableFilter | number | null
  }

  export type vaccineUpsertWithWhereUniqueWithoutManufacturerInput = {
    where: vaccineWhereUniqueInput
    update: XOR<vaccineUpdateWithoutManufacturerInput, vaccineUncheckedUpdateWithoutManufacturerInput>
    create: XOR<vaccineCreateWithoutManufacturerInput, vaccineUncheckedCreateWithoutManufacturerInput>
  }

  export type vaccineUpdateWithWhereUniqueWithoutManufacturerInput = {
    where: vaccineWhereUniqueInput
    data: XOR<vaccineUpdateWithoutManufacturerInput, vaccineUncheckedUpdateWithoutManufacturerInput>
  }

  export type vaccineUpdateManyWithWhereWithoutManufacturerInput = {
    where: vaccineScalarWhereInput
    data: XOR<vaccineUpdateManyMutationInput, vaccineUncheckedUpdateManyWithoutVaccinesInput>
  }

  export type vaccineScalarWhereInput = {
    AND?: Enumerable<vaccineScalarWhereInput>
    OR?: Enumerable<vaccineScalarWhereInput>
    NOT?: Enumerable<vaccineScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    doses?: IntNullableFilter | number | null
    info?: StringNullableFilter | string | null
    status?: EnumVaccineStatusFilter | VaccineStatus
    manufacturer_id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deletedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type dispatchUpsertWithWhereUniqueWithoutInstituteInput = {
    where: dispatchWhereUniqueInput
    update: XOR<dispatchUpdateWithoutInstituteInput, dispatchUncheckedUpdateWithoutInstituteInput>
    create: XOR<dispatchCreateWithoutInstituteInput, dispatchUncheckedCreateWithoutInstituteInput>
  }

  export type dispatchUpdateWithWhereUniqueWithoutInstituteInput = {
    where: dispatchWhereUniqueInput
    data: XOR<dispatchUpdateWithoutInstituteInput, dispatchUncheckedUpdateWithoutInstituteInput>
  }

  export type dispatchUpdateManyWithWhereWithoutInstituteInput = {
    where: dispatchScalarWhereInput
    data: XOR<dispatchUpdateManyMutationInput, dispatchUncheckedUpdateManyWithoutDispatchInput>
  }

  export type dispatchScalarWhereInput = {
    AND?: Enumerable<dispatchScalarWhereInput>
    OR?: Enumerable<dispatchScalarWhereInput>
    NOT?: Enumerable<dispatchScalarWhereInput>
    id?: IntFilter | number
    vaccine_id?: IntFilter | number
    batch_id?: StringFilter | string
    status?: EnumDispatchStatusFilter | DispatchStatus
    civilian_id?: IntNullableFilter | number | null
    institute_id?: IntFilter | number
    staff_id?: IntNullableFilter | number | null
    request_date?: DateTimeFilter | Date | string
    dispatch_date?: DateTimeNullableFilter | Date | string | null
    receive_date?: DateTimeNullableFilter | Date | string | null
    vaccination_date?: DateTimeNullableFilter | Date | string | null
  }

  export type dispatchUpsertWithWhereUniqueWithoutStaffInput = {
    where: dispatchWhereUniqueInput
    update: XOR<dispatchUpdateWithoutStaffInput, dispatchUncheckedUpdateWithoutStaffInput>
    create: XOR<dispatchCreateWithoutStaffInput, dispatchUncheckedCreateWithoutStaffInput>
  }

  export type dispatchUpdateWithWhereUniqueWithoutStaffInput = {
    where: dispatchWhereUniqueInput
    data: XOR<dispatchUpdateWithoutStaffInput, dispatchUncheckedUpdateWithoutStaffInput>
  }

  export type dispatchUpdateManyWithWhereWithoutStaffInput = {
    where: dispatchScalarWhereInput
    data: XOR<dispatchUpdateManyMutationInput, dispatchUncheckedUpdateManyWithoutStaff_dispatchInput>
  }

  export type usersCreateWithoutVaccinesInput = {
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
    institute?: usersCreateNestedOneWithoutStaffInput
    staff?: usersCreateNestedManyWithoutInstituteInput
    dispatch?: dispatchCreateNestedManyWithoutInstituteInput
    staff_dispatch?: dispatchCreateNestedManyWithoutStaffInput
  }

  export type usersUncheckedCreateWithoutVaccinesInput = {
    id?: number
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
    institute_id?: number | null
    staff?: usersUncheckedCreateNestedManyWithoutInstituteInput
    dispatch?: dispatchUncheckedCreateNestedManyWithoutInstituteInput
    staff_dispatch?: dispatchUncheckedCreateNestedManyWithoutStaffInput
  }

  export type usersCreateOrConnectWithoutVaccinesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutVaccinesInput, usersUncheckedCreateWithoutVaccinesInput>
  }

  export type dispatchCreateWithoutVaccineInput = {
    batch_id: string
    status?: DispatchStatus
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
    civilian?: civilianCreateNestedOneWithoutDispatchInput
    institute: usersCreateNestedOneWithoutDispatchInput
    staff?: usersCreateNestedOneWithoutStaff_dispatchInput
  }

  export type dispatchUncheckedCreateWithoutVaccineInput = {
    id?: number
    batch_id: string
    status?: DispatchStatus
    civilian_id?: number | null
    institute_id: number
    staff_id?: number | null
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
  }

  export type dispatchCreateOrConnectWithoutVaccineInput = {
    where: dispatchWhereUniqueInput
    create: XOR<dispatchCreateWithoutVaccineInput, dispatchUncheckedCreateWithoutVaccineInput>
  }

  export type dispatchCreateManyVaccineInputEnvelope = {
    data: Enumerable<dispatchCreateManyVaccineInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutVaccinesInput = {
    update: XOR<usersUpdateWithoutVaccinesInput, usersUncheckedUpdateWithoutVaccinesInput>
    create: XOR<usersCreateWithoutVaccinesInput, usersUncheckedCreateWithoutVaccinesInput>
  }

  export type usersUpdateWithoutVaccinesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    institute?: usersUpdateOneWithoutStaffNestedInput
    staff?: usersUpdateManyWithoutInstituteNestedInput
    dispatch?: dispatchUpdateManyWithoutInstituteNestedInput
    staff_dispatch?: dispatchUpdateManyWithoutStaffNestedInput
  }

  export type usersUncheckedUpdateWithoutVaccinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    institute_id?: NullableIntFieldUpdateOperationsInput | number | null
    staff?: usersUncheckedUpdateManyWithoutInstituteNestedInput
    dispatch?: dispatchUncheckedUpdateManyWithoutInstituteNestedInput
    staff_dispatch?: dispatchUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type dispatchUpsertWithWhereUniqueWithoutVaccineInput = {
    where: dispatchWhereUniqueInput
    update: XOR<dispatchUpdateWithoutVaccineInput, dispatchUncheckedUpdateWithoutVaccineInput>
    create: XOR<dispatchCreateWithoutVaccineInput, dispatchUncheckedCreateWithoutVaccineInput>
  }

  export type dispatchUpdateWithWhereUniqueWithoutVaccineInput = {
    where: dispatchWhereUniqueInput
    data: XOR<dispatchUpdateWithoutVaccineInput, dispatchUncheckedUpdateWithoutVaccineInput>
  }

  export type dispatchUpdateManyWithWhereWithoutVaccineInput = {
    where: dispatchScalarWhereInput
    data: XOR<dispatchUpdateManyMutationInput, dispatchUncheckedUpdateManyWithoutDispatchInput>
  }

  export type vaccineCreateWithoutDispatchInput = {
    name: string
    doses?: number | null
    info?: string | null
    status?: VaccineStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    manufacturer: usersCreateNestedOneWithoutVaccinesInput
  }

  export type vaccineUncheckedCreateWithoutDispatchInput = {
    id?: number
    name: string
    doses?: number | null
    info?: string | null
    status?: VaccineStatus
    manufacturer_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type vaccineCreateOrConnectWithoutDispatchInput = {
    where: vaccineWhereUniqueInput
    create: XOR<vaccineCreateWithoutDispatchInput, vaccineUncheckedCreateWithoutDispatchInput>
  }

  export type civilianCreateWithoutDispatchInput = {
    cnic: string
    name: string
    date_of_birth?: Date | string | null
    gender: Gender
    contact: string
  }

  export type civilianUncheckedCreateWithoutDispatchInput = {
    id?: number
    cnic: string
    name: string
    date_of_birth?: Date | string | null
    gender: Gender
    contact: string
  }

  export type civilianCreateOrConnectWithoutDispatchInput = {
    where: civilianWhereUniqueInput
    create: XOR<civilianCreateWithoutDispatchInput, civilianUncheckedCreateWithoutDispatchInput>
  }

  export type usersCreateWithoutDispatchInput = {
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
    institute?: usersCreateNestedOneWithoutStaffInput
    staff?: usersCreateNestedManyWithoutInstituteInput
    vaccines?: vaccineCreateNestedManyWithoutManufacturerInput
    staff_dispatch?: dispatchCreateNestedManyWithoutStaffInput
  }

  export type usersUncheckedCreateWithoutDispatchInput = {
    id?: number
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
    institute_id?: number | null
    staff?: usersUncheckedCreateNestedManyWithoutInstituteInput
    vaccines?: vaccineUncheckedCreateNestedManyWithoutManufacturerInput
    staff_dispatch?: dispatchUncheckedCreateNestedManyWithoutStaffInput
  }

  export type usersCreateOrConnectWithoutDispatchInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutDispatchInput, usersUncheckedCreateWithoutDispatchInput>
  }

  export type usersCreateWithoutStaff_dispatchInput = {
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
    institute?: usersCreateNestedOneWithoutStaffInput
    staff?: usersCreateNestedManyWithoutInstituteInput
    vaccines?: vaccineCreateNestedManyWithoutManufacturerInput
    dispatch?: dispatchCreateNestedManyWithoutInstituteInput
  }

  export type usersUncheckedCreateWithoutStaff_dispatchInput = {
    id?: number
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
    institute_id?: number | null
    staff?: usersUncheckedCreateNestedManyWithoutInstituteInput
    vaccines?: vaccineUncheckedCreateNestedManyWithoutManufacturerInput
    dispatch?: dispatchUncheckedCreateNestedManyWithoutInstituteInput
  }

  export type usersCreateOrConnectWithoutStaff_dispatchInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutStaff_dispatchInput, usersUncheckedCreateWithoutStaff_dispatchInput>
  }

  export type vaccineUpsertWithoutDispatchInput = {
    update: XOR<vaccineUpdateWithoutDispatchInput, vaccineUncheckedUpdateWithoutDispatchInput>
    create: XOR<vaccineCreateWithoutDispatchInput, vaccineUncheckedCreateWithoutDispatchInput>
  }

  export type vaccineUpdateWithoutDispatchInput = {
    name?: StringFieldUpdateOperationsInput | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVaccineStatusFieldUpdateOperationsInput | VaccineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    manufacturer?: usersUpdateOneRequiredWithoutVaccinesNestedInput
  }

  export type vaccineUncheckedUpdateWithoutDispatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVaccineStatusFieldUpdateOperationsInput | VaccineStatus
    manufacturer_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type civilianUpsertWithoutDispatchInput = {
    update: XOR<civilianUpdateWithoutDispatchInput, civilianUncheckedUpdateWithoutDispatchInput>
    create: XOR<civilianCreateWithoutDispatchInput, civilianUncheckedCreateWithoutDispatchInput>
  }

  export type civilianUpdateWithoutDispatchInput = {
    cnic?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | Gender
    contact?: StringFieldUpdateOperationsInput | string
  }

  export type civilianUncheckedUpdateWithoutDispatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    cnic?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: EnumGenderFieldUpdateOperationsInput | Gender
    contact?: StringFieldUpdateOperationsInput | string
  }

  export type usersUpsertWithoutDispatchInput = {
    update: XOR<usersUpdateWithoutDispatchInput, usersUncheckedUpdateWithoutDispatchInput>
    create: XOR<usersCreateWithoutDispatchInput, usersUncheckedCreateWithoutDispatchInput>
  }

  export type usersUpdateWithoutDispatchInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    institute?: usersUpdateOneWithoutStaffNestedInput
    staff?: usersUpdateManyWithoutInstituteNestedInput
    vaccines?: vaccineUpdateManyWithoutManufacturerNestedInput
    staff_dispatch?: dispatchUpdateManyWithoutStaffNestedInput
  }

  export type usersUncheckedUpdateWithoutDispatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    institute_id?: NullableIntFieldUpdateOperationsInput | number | null
    staff?: usersUncheckedUpdateManyWithoutInstituteNestedInput
    vaccines?: vaccineUncheckedUpdateManyWithoutManufacturerNestedInput
    staff_dispatch?: dispatchUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type usersUpsertWithoutStaff_dispatchInput = {
    update: XOR<usersUpdateWithoutStaff_dispatchInput, usersUncheckedUpdateWithoutStaff_dispatchInput>
    create: XOR<usersCreateWithoutStaff_dispatchInput, usersUncheckedCreateWithoutStaff_dispatchInput>
  }

  export type usersUpdateWithoutStaff_dispatchInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    institute?: usersUpdateOneWithoutStaffNestedInput
    staff?: usersUpdateManyWithoutInstituteNestedInput
    vaccines?: vaccineUpdateManyWithoutManufacturerNestedInput
    dispatch?: dispatchUpdateManyWithoutInstituteNestedInput
  }

  export type usersUncheckedUpdateWithoutStaff_dispatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    institute_id?: NullableIntFieldUpdateOperationsInput | number | null
    staff?: usersUncheckedUpdateManyWithoutInstituteNestedInput
    vaccines?: vaccineUncheckedUpdateManyWithoutManufacturerNestedInput
    dispatch?: dispatchUncheckedUpdateManyWithoutInstituteNestedInput
  }

  export type dispatchCreateWithoutCivilianInput = {
    batch_id: string
    status?: DispatchStatus
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
    vaccine: vaccineCreateNestedOneWithoutDispatchInput
    institute: usersCreateNestedOneWithoutDispatchInput
    staff?: usersCreateNestedOneWithoutStaff_dispatchInput
  }

  export type dispatchUncheckedCreateWithoutCivilianInput = {
    id?: number
    vaccine_id: number
    batch_id: string
    status?: DispatchStatus
    institute_id: number
    staff_id?: number | null
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
  }

  export type dispatchCreateOrConnectWithoutCivilianInput = {
    where: dispatchWhereUniqueInput
    create: XOR<dispatchCreateWithoutCivilianInput, dispatchUncheckedCreateWithoutCivilianInput>
  }

  export type dispatchCreateManyCivilianInputEnvelope = {
    data: Enumerable<dispatchCreateManyCivilianInput>
    skipDuplicates?: boolean
  }

  export type dispatchUpsertWithWhereUniqueWithoutCivilianInput = {
    where: dispatchWhereUniqueInput
    update: XOR<dispatchUpdateWithoutCivilianInput, dispatchUncheckedUpdateWithoutCivilianInput>
    create: XOR<dispatchCreateWithoutCivilianInput, dispatchUncheckedCreateWithoutCivilianInput>
  }

  export type dispatchUpdateWithWhereUniqueWithoutCivilianInput = {
    where: dispatchWhereUniqueInput
    data: XOR<dispatchUpdateWithoutCivilianInput, dispatchUncheckedUpdateWithoutCivilianInput>
  }

  export type dispatchUpdateManyWithWhereWithoutCivilianInput = {
    where: dispatchScalarWhereInput
    data: XOR<dispatchUpdateManyMutationInput, dispatchUncheckedUpdateManyWithoutDispatchInput>
  }

  export type usersCreateManyInstituteInput = {
    id?: number
    email: string
    password?: string | null
    name: string
    contact?: string | null
    license?: string | null
    gender?: Gender | null
    type?: UserType
    status?: UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    date_of_birth?: Date | string | null
    cnic?: string | null
    location?: string | null
  }

  export type vaccineCreateManyManufacturerInput = {
    id?: number
    name: string
    doses?: number | null
    info?: string | null
    status?: VaccineStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type dispatchCreateManyInstituteInput = {
    id?: number
    vaccine_id: number
    batch_id: string
    status?: DispatchStatus
    civilian_id?: number | null
    staff_id?: number | null
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
  }

  export type dispatchCreateManyStaffInput = {
    id?: number
    vaccine_id: number
    batch_id: string
    status?: DispatchStatus
    civilian_id?: number | null
    institute_id: number
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
  }

  export type usersUpdateWithoutInstituteInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    staff?: usersUpdateManyWithoutInstituteNestedInput
    vaccines?: vaccineUpdateManyWithoutManufacturerNestedInput
    dispatch?: dispatchUpdateManyWithoutInstituteNestedInput
    staff_dispatch?: dispatchUpdateManyWithoutStaffNestedInput
  }

  export type usersUncheckedUpdateWithoutInstituteInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    staff?: usersUncheckedUpdateManyWithoutInstituteNestedInput
    vaccines?: vaccineUncheckedUpdateManyWithoutManufacturerNestedInput
    dispatch?: dispatchUncheckedUpdateManyWithoutInstituteNestedInput
    staff_dispatch?: dispatchUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type usersUncheckedUpdateManyWithoutStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | Gender | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cnic?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type vaccineUpdateWithoutManufacturerInput = {
    name?: StringFieldUpdateOperationsInput | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVaccineStatusFieldUpdateOperationsInput | VaccineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dispatch?: dispatchUpdateManyWithoutVaccineNestedInput
  }

  export type vaccineUncheckedUpdateWithoutManufacturerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVaccineStatusFieldUpdateOperationsInput | VaccineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dispatch?: dispatchUncheckedUpdateManyWithoutVaccineNestedInput
  }

  export type vaccineUncheckedUpdateManyWithoutVaccinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    doses?: NullableIntFieldUpdateOperationsInput | number | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumVaccineStatusFieldUpdateOperationsInput | VaccineStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dispatchUpdateWithoutInstituteInput = {
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccine?: vaccineUpdateOneRequiredWithoutDispatchNestedInput
    civilian?: civilianUpdateOneWithoutDispatchNestedInput
    staff?: usersUpdateOneWithoutStaff_dispatchNestedInput
  }

  export type dispatchUncheckedUpdateWithoutInstituteInput = {
    id?: IntFieldUpdateOperationsInput | number
    vaccine_id?: IntFieldUpdateOperationsInput | number
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    civilian_id?: NullableIntFieldUpdateOperationsInput | number | null
    staff_id?: NullableIntFieldUpdateOperationsInput | number | null
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dispatchUncheckedUpdateManyWithoutDispatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    vaccine_id?: IntFieldUpdateOperationsInput | number
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    civilian_id?: NullableIntFieldUpdateOperationsInput | number | null
    staff_id?: NullableIntFieldUpdateOperationsInput | number | null
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dispatchUpdateWithoutStaffInput = {
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccine?: vaccineUpdateOneRequiredWithoutDispatchNestedInput
    civilian?: civilianUpdateOneWithoutDispatchNestedInput
    institute?: usersUpdateOneRequiredWithoutDispatchNestedInput
  }

  export type dispatchUncheckedUpdateWithoutStaffInput = {
    id?: IntFieldUpdateOperationsInput | number
    vaccine_id?: IntFieldUpdateOperationsInput | number
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    civilian_id?: NullableIntFieldUpdateOperationsInput | number | null
    institute_id?: IntFieldUpdateOperationsInput | number
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dispatchUncheckedUpdateManyWithoutStaff_dispatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    vaccine_id?: IntFieldUpdateOperationsInput | number
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    civilian_id?: NullableIntFieldUpdateOperationsInput | number | null
    institute_id?: IntFieldUpdateOperationsInput | number
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dispatchCreateManyVaccineInput = {
    id?: number
    batch_id: string
    status?: DispatchStatus
    civilian_id?: number | null
    institute_id: number
    staff_id?: number | null
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
  }

  export type dispatchUpdateWithoutVaccineInput = {
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    civilian?: civilianUpdateOneWithoutDispatchNestedInput
    institute?: usersUpdateOneRequiredWithoutDispatchNestedInput
    staff?: usersUpdateOneWithoutStaff_dispatchNestedInput
  }

  export type dispatchUncheckedUpdateWithoutVaccineInput = {
    id?: IntFieldUpdateOperationsInput | number
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    civilian_id?: NullableIntFieldUpdateOperationsInput | number | null
    institute_id?: IntFieldUpdateOperationsInput | number
    staff_id?: NullableIntFieldUpdateOperationsInput | number | null
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dispatchCreateManyCivilianInput = {
    id?: number
    vaccine_id: number
    batch_id: string
    status?: DispatchStatus
    institute_id: number
    staff_id?: number | null
    request_date?: Date | string
    dispatch_date?: Date | string | null
    receive_date?: Date | string | null
    vaccination_date?: Date | string | null
  }

  export type dispatchUpdateWithoutCivilianInput = {
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccine?: vaccineUpdateOneRequiredWithoutDispatchNestedInput
    institute?: usersUpdateOneRequiredWithoutDispatchNestedInput
    staff?: usersUpdateOneWithoutStaff_dispatchNestedInput
  }

  export type dispatchUncheckedUpdateWithoutCivilianInput = {
    id?: IntFieldUpdateOperationsInput | number
    vaccine_id?: IntFieldUpdateOperationsInput | number
    batch_id?: StringFieldUpdateOperationsInput | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | DispatchStatus
    institute_id?: IntFieldUpdateOperationsInput | number
    staff_id?: NullableIntFieldUpdateOperationsInput | number | null
    request_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dispatch_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receive_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vaccination_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}